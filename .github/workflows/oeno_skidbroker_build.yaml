name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
   branches:
     - dev
     - integration
  workflow_call:
    inputs:
      input_from_caller:
        type: string

    secrets:
      envPAT:
        required: true

      PYINSTALLER_KEY:
        required: true
        
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  #BUCKET_NAME : "github-oidc-test-mitch"
  AWS_REGION : "us-east-1"
  PROJECT_FILES_GIT : "beer-project-properties.git"
  ORGANIZATION: "pallcorporation"
  PROJECT_FILES_NAME: "project.properties"
  PROJECT_FILES_DIRECTORY: "project_file"
  CDK_MODULE: "cdk_checkedout"
  DEVOPS_STORE: "devops_store"
  CODEBUILD_BUILD_NUMBER: "1"
  ARTIFACT_NAME: "skid_broker_client"
  ARTIFACT_DESCRIPTION: "IPC <--> PLC/HMI Communication Broker"




  

permissions:
      id-token: write
      contents: read    # This is required for actions/checkout@v1
      packages: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:  
  AWS-WIN-EXE-BUILD:
    if: github.repository != 'pallcorporation/digital-iot-devops-store'
    runs-on: windows-2019
      
    steps:
        # Get current time stamp to use as reference elsewhere
        - name: Get current date
          id: date
          run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"  
        
        - name: Git clone the repository
          uses: actions/checkout@v2

        - name: Set up build env
          run: |
            python --version
            python -m venv env
            env\scripts\Activate
            env\scripts\pip install -r requirements.txt
            env\scripts\pip install pyinstaller pyinstaller[encryption] tinyaes
            cp -r env\Lib\site-packages\dash* env\Include
            ls env\Include
            echo ${{env.ARTIFACT_NAME}}
            echo ${{env.PYINSTALLER_KEY}}
            python generateVersionInfo.py -v ${{env.CODEBUILD_BUILD_NUMBER}} -n ${{env.ARTIFACT_NAME}} -d ${{env.ARTIFACT_DESCRIPTION}}
            pyinstaller -y --icon .\assets\icon.ico --version-file .\assets\versioninfo --onefile --add-data "../env/Include;./" --key=${{env.PYINSTALLER_KEY}} skid_broker_client.py
            C:\"Program Files (x86)"\"Windows Kits"\10\bin\x64\signtool.exe sign

            


  
        
        
        # Upload a file to AWS s3
        # - name:  Deploy to S3 - Copy Build folder to s3
        # #  if: ${{ steps.skip_everything.outputs.skip_everything1 != 'true' && steps.skip_npm.outputs.bypass_npm !='true' && steps.get_deployment_type.outputs.deployment_type == 'web' && steps.get_cdk_destroy_stack.outputs.cdk_destroy_stack != 'true' }}
        #   run: |
             #aws s3 cp urls.json s3://${{inputs.hosting_bucket}}-${{env.AWS_ENV_NAME}}



# pre_build:  
#     commands:  
#       # Create Python virtual environment
#       - 'echo "Creating Python Virtual Enironment"'
#       - 'python -m venv env'
#       # Activate environment and installrequired dependencies
#       - 'echo "Installing dependencies"'
#       - 'env\scripts\Activate' 
#       - 'env\scripts\pip install -r requirements.txt'
#       - 'env\scripts\pip install pyinstaller pyinstaller[encryption] tinyaes'

#       # Move static assets and scripts to Include dir for exe build
#       - 'echo "moving static required assets to Include directory for exe build"'
#       #- 'cd env\Lib\site-packages'
#       #- 'for /d %a in ("dash*") do xcopy /S "%a"/I /Y "..\..\Include\%a"'
#       - 'cp -r env\Lib\site-packages\dash* env\Include'
#       - 'ls env\Include'
#   build:  
#     commands:  
#       # Create asset verison info
#       - 'python generateVersionInfo.py -v $Env:CODEBUILD_BUILD_NUMBER -n $Env:ARTIFACT_NAME -d $Env:ARTIFACT_DESCRIPTION'
#       # Build Executible
#       - 'cd service'
#       - '..\env\Scripts\pyinstaller -y --icon .\assets\icon.ico --version-file .\assets\versioninfo --onefile --add-data "../env/Include;./" --key=$Env:PYINSTALLER_KEY skid_broker_client.py'
#       # Bundle PLC Snap7 dependency dll with exe 
#       - 'cp .\snap7.dll .\dist'
#       # Sign exe with Pall Corp Oenoflow Cert
#       - 'C:\"Program Files (x86)"\"Windows Kits"\8.1\bin\x64\signtool sign /debug /F ..\oenoflow_prod.pfx /P 72556366 /T http://timestamp.digicert.com ..\service\dist\skid_broker_client.exe'
#   post_build:  
#     commands:  
#       - 'mv .\dist\skid_broker_client.exe .\dist\$Env:ARTIFACT_NAME.exe'


        

