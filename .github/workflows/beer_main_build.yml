name: Release Tagging

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - main

  workflow_call:
    inputs:
      deployment_type:
        required: true
        type: string
      branch_name:
        type: string

    secrets:
      envPAT:
        required: true
      teams_uri:
        required: false

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  #BUCKET_NAME : "github-oidc-test-mitch"
  AWS_REGION : "us-east-1"
  PROJECT_FILES_GIT : "beer-project-properties.git"
  ORGANIZATION: "pallcorporation"
  PROJECT_FILES_NAME: "project.properties"
  PROJECT_FILES_DIRECTORY: "beer-project-properties"
  IMAGE_REGISTRY: "ghcr.io"
  IMAGE_REGISTRY_USERNAME: ${{github.actor}}
  IMAGE_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NX_ARTIFACT_STORE: beer-ul-nx-workspace


permissions:
      id-token: write
      contents: read    # This is required for actions/checkout@v1
      packages: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:  
  main-setup:
    if: (github.repository != 'pallcorporation/digital-iot-devops-store' && github.ref == 'refs/heads/main')
    #permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      data: ${{ steps.date.outputs.date }}
      repo_version: ${{ steps.version_number.outputs.new_version }}     
      tools_account: ${{steps.project_constants.outputs.tools_account_id}}
      aws_credentials_role: ${{steps.aws_assume_role.outputs.role_arn1}}
      aws_credentials_session_name: ${{ github.event.repository.name }}-${{ steps.date.outputs.date }}
      AWS_BETA_ACCOUNT_ID: ${{steps.project_constants.outputs.beta_account_id }}
      AWS_PRODUCTION_ACCOUNT_ID: ${{steps.project_constants.outputs.prod_account_id }}

      aws_beta_credentials_role: ${{steps.aws_beta_assume_role.outputs.role_arn1}}
      aws_prod_credentials_role: ${{steps.aws_prod_assume_role.outputs.role_arn1}}
      aws_beta_credentials_session_name: ${{ github.event.repository.name }}-beta-${{ steps.date.outputs.date }}
      aws_prod_credentials_session_name: ${{ github.event.repository.name }}-prod-${{ steps.date.outputs.date }}


      AWS_BETA_ACCOUNT_DEPLOY: ${{steps.project_constants.outputs.beta_account_deploy }}
      AWS_PRODUCTION_ACCOUNT_DEPLOY: ${{steps.project_constants.outputs.prod_account_deploy }}
    steps:
        - name: Get current date
          id: date
          run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"
        
        # Clone repositories prior to work
        - name: Git clone the repository
          uses: actions/checkout@v2

        - name: Make project files directory
          run: mkdir ${{env.PROJECT_FILES_DIRECTORY}}

        - name: Project files clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/beer-project-properties
            ref: main
            path: ${{env.PROJECT_FILES_DIRECTORY}}
        
        # Grant permissions to all files in directory
        - name: Grant permissions to all files
          run: chmod -R 755 ./  
          
        # Read of project files and set to variables
        - name: Get project constants from project.properties
          id: project_constants
          run: |
            account_id="`grep aws_tools_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=tools_account_id::${account_id}"

            oidc_role="`grep aws_tools_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=oidc_role_name::${oidc_role}"

            beta_account="`grep aws_beta_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=beta_account_id::${beta_account}"

            prod_account="`grep aws_production_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=prod_account_id::${prod_account}"

            beta_oidc_role="`grep aws_beta_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=beta_oidc_role::${beta_oidc_role}"

            prod_oidc_role="`grep aws_production_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=prod_oidc_role::${prod_oidc_role}"

            beta_account_cdk_deploy="`grep aws_beta_cdk_deployment_role ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=beta_account_deploy::${beta_account_cdk_deploy}"

            prod_account_cdk_deploy="`grep aws_production_cdk_deployment_role ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=prod_account_deploy::${prod_account_cdk_deploy}"


          working-directory: ${{env.PROJECT_FILES_DIRECTORY}}

        # Role that will be used for OIDC. This is the role this session will assume when connecting to AWS         
        - name: Tools Arn to use
          id: aws_assume_role
          run: |
            echo "::set-output name=role_arn1::arn:aws:iam::${{steps.project_constants.outputs.tools_account_id}}:role/${{ steps.project_constants.outputs.oidc_role_name}}"
        
        - name: Beta Arn to use
          id: aws_beta_assume_role
          run: |
            echo "::set-output name=role_arn1::arn:aws:iam::${{steps.project_constants.outputs.beta_account_id}}:role/${{ steps.project_constants.outputs.beta_oidc_role}}"
        
        - name: Prod Arn to use
          id: aws_prod_assume_role
          run: |
            echo "::set-output name=role_arn1::arn:aws:iam::${{steps.project_constants.outputs.prod_account_id}}:role/${{ steps.project_constants.outputs.prod_oidc_role}}"

      
      # https://github.com/marketplace/actions/github-tag-with-semantic-versioning
       # - uses: actions/checkout@2
       # -
        - name: Github Tag with semantic versioning
          id: version_number
          uses: hennejg/github-tag-action@v4.3.1
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            default_bump: minor
            tag_prefix: v
            release_branches: main

        - name: Version number
          run: |
            echo "${{ steps.version_number.outputs.new_version }} is the new version"
            echo "TAG_VERSION=${{ steps.version_number.outputs.new_version }}" >> $GITHUB_ENV
        - name: Create changelog
          id: build_changelog
          uses: mikepenz/release-changelog-builder-action@v2.9.0
          env:
            GITHUB_TOKEN: ${{ secrets.envPAT }}
        
        - name: Echo changelog
          run: |
            echo ${{steps.build_changelog.outputs.changelog}}
        
        # - name: Create changelog text
        #   id: changelog
        #   uses: loopwerk/tag-changelog@v1
        #   with:
        #     token: ${{ secrets.envPAT }}
        #     exclude_types: other,doc,chore

        # - name: Create Release
        #   uses: actions/create-release@v1.1.4
        #   with:
        #     tag_name: ${{ steps.version_number.outputs.new_version }}
        #     release_name: Bock ${{ steps.version_number.outputs.new_version }}
        #     body: ${{ steps.changelog.outputs.changes }}
        #   env:
        #     GITHUB_TOKEN: ${{ secrets.envPAT }}
        
  Docker-Images:
    needs: main-setup
    if: (github.repository != 'pallcorporation/digital-iot-devops-store' && github.ref == 'refs/heads/main' && inputs.deployment_type == 'image')
    runs-on: ubuntu-latest          
    steps:
        - name: Get current date
          id: date
          run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"
        
        # Clone repositories prior to work
        - name: Git clone the repository
          uses: actions/checkout@v2
        
        - name: Version number
          run: |
            echo "${{ needs.main-setup.outputs.repo_version }} is the new version"
            echo "TAG_VERSION=${{ needs.main-setup.outputs.repo_version }}" >> $GITHUB_ENV
        
        - name: Image Repository name
          run: |
            echo "IMAGE_REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{ needs.main-setup.outputs.aws_credentials_role }}
            role-session-name: ${{needs.main-setup.outputs.aws_credentials_session_name}}
            aws-region: ${{ env.AWS_REGION }}
        
        - name: Login to docker
          if: |
            ${{ steps.skip_dk_build.outputs.bypass_dk_build !='true' && inputs.deployment_type == 'image' }}
          uses: docker/login-action@v1
          with:
            registry: ${{env.IMAGE_REGISTRY}}
            username: ${{env.IMAGE_REGISTRY_USERNAME}}
            password: ${{env.IMAGE_REGISTRY_TOKEN}}
        
        - name: Create image tags
          if: ${{inputs.deployment_type == 'image' }}
          run: |
            echo DOCKER_TAG_VERSION="${{needs.main-setup.outputs.tools_account}}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${IMAGE_REPO_NAME}:$TAG_VERSION" >> $GITHUB_ENV
            echo DOCKER_TAG_LATEST="${{needs.main-setup.outputs.tools_account}}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${IMAGE_REPO_NAME}:latest" >> $GITHUB_ENV
            echo GHCR_IMAGE_ID="ghcr.io/${{github.repository_owner}}/${IMAGE_REPO_NAME}:$TAG_VERSION" >> $GITHUB_ENV
  
        - name: Build Docker images
          if: ${{inputs.deployment_type == 'image'}}
          id: build_images
          run: |
            docker build -t $DOCKER_TAG_VERSION .
            docker tag $DOCKER_TAG_VERSION $DOCKER_TAG_LATEST
            docker tag $DOCKER_TAG_VERSION $GHCR_IMAGE_ID

        - name: ECR Login
          if: ${{inputs.deployment_type == 'image'}}
          id: ecr_login
          run: |
            (aws ecr describe-repositories \
            --repository-names ${IMAGE_REPO_NAME} \
            && echo "::set-output name=repo_created::false" ) || \
            ( aws ecr create-repository \
            --repository-name ${IMAGE_REPO_NAME} \
            && echo "::set-output name=repo_created::true" )

            aws ecr get-login-password \
            --region ${{ env.AWS_REGION }}| docker login \
            --username AWS \
            --password-stdin ${{needs.main-setup.outputs.tools_account}}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        
        - name: Make ecr policy for Beta & Production
          if: ${{inputs.deployment_type == 'image'}}
          run: |
            cat >./tools-cross-ecr-policy.json << EOF
            {
              "Version":"2008-10-17",
              "Statement":[
                  {
                    "Sid":"allowPallpull",
                    "Effect":"Allow",
                    "Principal":{
                        "Service":"lambda.amazonaws.com",
                        "AWS":[
                          "arn:aws:iam::${{needs.main-setup.outputs.AWS_BETA_ACCOUNT_ID}}:root",
                          "arn:aws:iam::${{needs.main-setup.outputs.AWS_BETA_ACCOUNT_ID}}:role/${{needs.main-setup.outputs.AWS_BETA_ACCOUNT_DEPLOY}}",
                          "arn:aws:iam::${{needs.main-setup.outputs.AWS_PRODUCTION_ACCOUNT_ID}}:root"
                        ]
                    },
                    "Action":[
                        "ecr:BatchCheckLayerAvailability",
                        "ecr:BatchGetImage",
                        "ecr:GetAuthorizationToken",
                        "ecr:GetDownloadUrlForLayer"
                    ]
                  }
              ]
            }
            EOF
            

        - name: Set repository policy for Beta & Production
          if: ${{inputs.deployment_type == 'image'}}
          run: |
            aws ecr set-repository-policy \
            --repository-name ${IMAGE_REPO_NAME} \
            --policy-text file://tools-cross-ecr-policy.json

        - name: Push docker images to ECR & GHCR
          if: ${{inputs.deployment_type == 'image' }}
          run: |
            docker push $DOCKER_TAG_VERSION
            docker push $DOCKER_TAG_LATEST
            docker push $GHCR_IMAGE_ID

        - name: Microsoft Teams Notification
          if: success()
          uses: jdcargile/ms-teams-notification@v1.3
          with:
            github-token: ${{ secrets.envPAT }} # this will use the runner's token.
            ms-teams-webhook-uri: ${{ secrets.teams_uri }}
            notification-summary: "Build Successful &#x2705; : ${{env.IMAGE_REPO_NAME}} v${{env.TAG_VERSION}}"
            notification-color: 00FF00
            timezone: America/New_York
        
        - name: Microsoft Teams Notification
          if: failure()
          uses: jdcargile/ms-teams-notification@v1.3
          with:
            github-token: ${{ secrets.envPAT }} # this will use the runner's token.
            ms-teams-webhook-uri: ${{ secrets.teams_uri }}
            notification-summary: "Build Error &#x274C; : ${{env.IMAGE_REPO_NAME}} Please check workflow"
            notification-color: FF0000
            timezone: America/New_York

  Frontend-React-Build-Beta:
    needs: main-setup
    if: (github.repository != 'pallcorporation/digital-iot-devops-store' && github.ref == 'refs/heads/main' && inputs.deployment_type == 'nx')
    runs-on: ubuntu-latest          
    steps:
        - name: Get current date
          id: date
          run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"

        - name: Set ENV Variables
          run: |
            echo "BUCKET_DIRECTORY=beta" >> $GITHUB_ENV

        - name: Image Repository name
          run: |
            echo "IMAGE_REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
        
        # Clone repositories prior to work
        - name: Git clone the repository
          uses: actions/checkout@v2
        
        - name: Version number
          run: |
            echo "${{ needs.main-setup.outputs.repo_version }} is the new version"
            echo "TAG_VERSION=${{ needs.main-setup.outputs.repo_version }}" >> $GITHUB_ENV
        
        # Installing npm
        - name: Setup node.js environment
          uses: actions/setup-node@v2.1.2
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{ needs.main-setup.outputs.aws_beta_credentials_role }}
            role-session-name: ${{needs.main-setup.outputs.aws_beta_credentials_session_name}}
            aws-region: ${{ env.AWS_REGION }}
        
        - name: Make project files directory
          run: mkdir ${{env.PROJECT_FILES_DIRECTORY}}

        - name: Project files clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/beer-project-properties
            ref: main
            path: ${{env.PROJECT_FILES_DIRECTORY}}
        
        - name: Create NX environment varibles file
          if: ${{inputs.deployment_type == 'nx'}}
          run: |
            pip3 install boto3
            pip3 install jproperties
            mv .env .env_old
            python3 ${{env.PROJECT_FILES_DIRECTORY}}/create_env_file.py
            cat .env
        - name: NX Build directory
          if: ${{inputs.deployment_type == 'nx'}}
          run: |
            echo "BUILD_DIRECTORY=dist/apps/beeriot-web" >> $GITHUB_ENV
        
        - name: Build NX Frontend
          if: ${{inputs.deployment_type == 'nx'}}
          run: |
            echo "Building NX... $TAG_VERSION"
            npm ci
            npx nx run beeriot-web:build:staging
        
        # Upload a file to AWS s3
        - name: Find-and-replace strings pt. 1
          uses: mad9000/actions-find-and-replace-string@2
          id: findandreplace_version
          with:
            source: ${{env.TAG_VERSION}} # this translates to ref/heads/main on the main branch, but can be any arbitrary string 
            find: '.'        # we want to remove ref/heads/ from source 
            replace: ''
        
        - name: Find-and-replace strings pt. 2
          uses: mad9000/actions-find-and-replace-string@2
          id: findandreplace_version2
          with:
            source: ${{ steps.findandreplace_version.outputs.value }} # this translates to ref/heads/main on the main branch, but can be any arbitrary string 
            find: '.'        # we want to remove ref/heads/ from source 
            replace: ''
        
        - name: Get the above output
          run: |
            echo "The replaced value is ${{ steps.findandreplace_version2.outputs.value }}"
            echo "NEW_VERSION_TAGGED=${{ steps.findandreplace_version2.outputs.value }}" >> $GITHUB_ENV

        - name: Compressed file name
          run: |
            echo "COMPRESSED_NX_TAGGED=v${{env.TAG_VERSION}}.zip" >> $GITHUB_ENV

        - name: Compress ${{env.NX_ARTIFACT_STORE}}
          run: |
            ls
            zip -r ${{env.COMPRESSED_NX_TAGGED}} $BUILD_DIRECTORY/

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{ needs.main-setup.outputs.aws_credentials_role }}
            role-session-name: ${{needs.main-setup.outputs.aws_credentials_session_name}}
            aws-region: ${{ env.AWS_REGION }}
        
        - name: Deploy to S3 - Test
          if: ${{ env.IMAGE_REPO_NAME == 'beer-test-nx-build' }}
          run:
            aws s3 cp ${{env.COMPRESSED_NX_TAGGED}} s3://${{env.NX_ARTIFACT_STORE}}/test/${{ env.BUCKET_DIRECTORY }}/${{env.COMPRESSED_NX_TAGGED}}
          
        - name:  Deploy to S3 - Copy Build folder to s3
          if: ${{ env.IMAGE_REPO_NAME != 'beer-test-nx-build' }}
          run: |
            aws s3 cp ${{env.COMPRESSED_NX_TAGGED}} s3://${{env.NX_ARTIFACT_STORE}}/${{ env.BUCKET_DIRECTORY }}/${{env.COMPRESSED_NX_TAGGED}}
        
        - name: Microsoft Teams Notification
          if: success()
          uses: jdcargile/ms-teams-notification@v1.3
          with:
            github-token: ${{ secrets.envPAT }} # this will use the runner's token.
            ms-teams-webhook-uri: ${{ secrets.teams_uri }}
            notification-summary: "Build Successful &#x2705; : ${{env.IMAGE_REPO_NAME}} v${{env.TAG_VERSION}}"
            notification-color: 00FF00
            timezone: America/New_York
        
        - name: Microsoft Teams Notification
          if: failure()
          uses: jdcargile/ms-teams-notification@v1.3
          with:
            github-token: ${{ secrets.envPAT }} # this will use the runner's token.
            ms-teams-webhook-uri: ${{ secrets.teams_uri }}
            notification-summary: "Build Error BETA &#x274C; : ${{env.IMAGE_REPO_NAME}} Please check workflow"
            notification-color: FF0000
            timezone: America/New_York
        
        #- name: Build Changelog
        #  id: github_release
        #  uses: mikepenz/release-changelog-builder-action@v1
        #  env:
        #    GITHUB_TOKEN: ${{ secrets.envPAT }}
        #- name: Print Changelog
        #  run: |
        #    echo ${{steps.github_release.outputs.changelog}}
  Frontend-React-Build-Prod:
    needs: [main-setup,Frontend-React-Build-Beta]
    if: (github.repository != 'pallcorporation/digital-iot-devops-store' && github.ref == 'refs/heads/main1' && inputs.deployment_type == 'nx')
    runs-on: ubuntu-latest          
    steps:
        - name: Get current date
          id: date
          run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"
        
        - name: Set ENV Variables
          run: |
            echo "BUCKET_DIRECTORY=prod" >> $GITHUB_ENV

        - name: Image Repository name
          run: |
            echo "IMAGE_REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
        
        # Clone repositories prior to work
        - name: Git clone the repository
          uses: actions/checkout@v2
        
        - name: Version number
          run: |
            echo "${{ needs.main-setup.outputs.repo_version }} is the new version"
            echo "TAG_VERSION=${{ needs.main-setup.outputs.repo_version }}" >> $GITHUB_ENV
        
        # Installing npm
        - name: Setup node.js environment
          uses: actions/setup-node@v2.1.2
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{ needs.main-setup.outputs.aws_prod_credentials_role }}
            role-session-name: ${{needs.main-setup.outputs.aws_prod_credentials_session_name}}
            aws-region: ${{ env.AWS_REGION }}
        
        - name: Make project files directory
          run: mkdir ${{env.PROJECT_FILES_DIRECTORY}}

        - name: Project files clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/beer-project-properties
            ref: main
            path: ${{env.PROJECT_FILES_DIRECTORY}}
        
        - name: Create NX environment varibles file
          if: ${{inputs.deployment_type == 'nx'}}
          run: |
            pip3 install boto3
            pip3 install jproperties
            mv .env .env_old
            python3 ${{env.PROJECT_FILES_DIRECTORY}}/create_env_file.py

        - name: NX Build directory
          if: ${{inputs.deployment_type == 'nx'}}
          run: |
            echo "BUILD_DIRECTORY=dist/apps/beeriot-web" >> $GITHUB_ENV
        
        - name: Build NX Frontend
          if: ${{inputs.deployment_type == 'nx'}}
          run: |
            echo "Building NX... $TAG_VERSION"
            npm ci
            npx nx run beeriot-web:build:staging
        
        # Upload a file to AWS s3
        - name: Find-and-replace strings pt. 1
          uses: mad9000/actions-find-and-replace-string@2
          id: findandreplace_version
          with:
            source: ${{env.TAG_VERSION}} # this translates to ref/heads/main on the main branch, but can be any arbitrary string 
            find: '.'        # we want to remove ref/heads/ from source 
            replace: ''
        
        - name: Find-and-replace strings pt. 2
          uses: mad9000/actions-find-and-replace-string@2
          id: findandreplace_version2
          with:
            source: ${{ steps.findandreplace_version.outputs.value }} # this translates to ref/heads/main on the main branch, but can be any arbitrary string 
            find: '.'        # we want to remove ref/heads/ from source 
            replace: ''
        
        - name: Get the above output
          run: |
            echo "The replaced value is ${{ steps.findandreplace_version2.outputs.value }}"
            echo "NEW_VERSION_TAGGED=${{ steps.findandreplace_version2.outputs.value }}" >> $GITHUB_ENV

        - name: Compressed file name
          run: |
            echo "COMPRESSED_NX_TAGGED=v${{env.TAG_VERSION}}.zip" >> $GITHUB_ENV

        - name: Compress ${{env.NX_ARTIFACT_STORE}}
          run: |
            ls
            zip -r ${{env.COMPRESSED_NX_TAGGED}} $BUILD_DIRECTORY/

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{ needs.main-setup.outputs.aws_credentials_role }}
            role-session-name: ${{needs.main-setup.outputs.aws_credentials_session_name}}
            aws-region: ${{ env.AWS_REGION }}
          
        - name: Deploy to S3 - Test
          if: ${{ env.IMAGE_REPO_NAME == 'beer-test-nx-build' }}
          run:
            aws s3 cp ${{env.COMPRESSED_NX_TAGGED}} s3://${{env.NX_ARTIFACT_STORE}}/test/${{ env.BUCKET_DIRECTORY }}/${{env.COMPRESSED_NX_TAGGED}}
          
        - name:  Deploy to S3 - Copy Build folder to s3
          if: ${{ env.IMAGE_REPO_NAME != 'beer-test-nx-build' }}
          run: |
            aws s3 cp ${{env.COMPRESSED_NX_TAGGED}} s3://${{env.NX_ARTIFACT_STORE}}/${{ env.BUCKET_DIRECTORY }}/${{env.COMPRESSED_NX_TAGGED}}
        
        - name: Microsoft Teams Notification
          if: success()
          uses: jdcargile/ms-teams-notification@v1.3
          with:
            github-token: ${{ secrets.envPAT }} # this will use the runner's token.
            ms-teams-webhook-uri: ${{ secrets.teams_uri }}
            notification-summary: "Build Successful &#x2705; : ${{env.IMAGE_REPO_NAME}} v${{env.TAG_VERSION}}"
            notification-color: 00FF00
            timezone: America/New_York
        
        - name: Microsoft Teams Notification
          if: failure()
          uses: jdcargile/ms-teams-notification@v1.3
          with:
            github-token: ${{ secrets.envPAT }} # this will use the runner's token.
            ms-teams-webhook-uri: ${{ secrets.teams_uri }}
            notification-summary: "Build Error PROD &#x274C; : ${{env.IMAGE_REPO_NAME}} Please check workflow"
            notification-color: FF0000
            timezone: America/New_York
        
        #- name: Build Changelog
        #  id: github_release
        #  uses: mikepenz/release-changelog-builder-action@v1
        #  env:
        #    GITHUB_TOKEN: ${{ secrets.envPAT }}
        #- name: Print Changelog
        #  run: |
        #    echo ${{steps.github_release.outputs.changelog}}
  
  All-Other-Build-Types:
    needs: main-setup
    if: (github.repository != 'pallcorporation/digital-iot-devops-store' && github.ref == 'refs/heads/main' && inputs.deployment_type != 'image' && inputs.deployment_type != 'nx')
    runs-on: ubuntu-latest          
    steps:
        - name: Get current date
          id: date
          run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"

        - name: Image Repository name
          run: |
            echo "IMAGE_REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
        
        # Clone repositories prior to work
        - name: Git clone the repository
          uses: actions/checkout@v2
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{ needs.main-setup.outputs.aws_credentials_role }}
            role-session-name: ${{needs.main-setup.outputs.aws_credentials_session_name}}
            aws-region: ${{ env.AWS_REGION }}
        
        - name: Version number
          run: |
            echo "${{ needs.main-setup.outputs.repo_version }} is the new version"
            echo "TAG_VERSION=${{ needs.main-setup.outputs.repo_version }}" >> $GITHUB_ENV
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{ needs.main-setup.outputs.aws_credentials_role }}
            role-session-name: ${{needs.main-setup.outputs.aws_credentials_session_name}}
            aws-region: ${{ env.AWS_REGION }}
        
        - name: Microsoft Teams Notification
          if: success()
          uses: jdcargile/ms-teams-notification@v1.3
          with:
            github-token: ${{ secrets.envPAT }} # this will use the runner's token.
            ms-teams-webhook-uri: ${{ secrets.teams_uri }}
            notification-summary: "Build Successful &#x2705; : ${{env.IMAGE_REPO_NAME}} v${{env.TAG_VERSION}}"
            notification-color: 00FF00
            timezone: America/New_York
        
        - name: Microsoft Teams Notification
          if: failure()
          uses: jdcargile/ms-teams-notification@v1.3
          with:
            github-token: ${{ secrets.envPAT }} # this will use the runner's token.
            ms-teams-webhook-uri: ${{ secrets.teams_uri }}
            notification-summary: "Build Error &#x274C; : ${{env.IMAGE_REPO_NAME}} Please check workflow"
            notification-color: FF0000
            timezone: America/New_York