name: Release Tagging

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - main

  workflow_call:
    inputs:
      branch_name:
        required: true
        type: string

      deployment_type:
        required: true
        type: string
    secrets:
      envPAT:
        required: true
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  #BUCKET_NAME : "github-oidc-test-mitch"
  AWS_REGION : "us-east-1"
  PROJECT_FILES_GIT : "beer-project-properties.git"
  ORGANIZATION: "pallcorporation"
  PROJECT_FILES_NAME: "project.properties"
  PROJECT_FILES_DIRECTORY: "project_file"
  IMAGE_REGISTRY: "ghcr.io"
  IMAGE_REGISTRY_USERNAME: ${{github.actor}}
  IMAGE_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}


permissions:
      id-token: write
      contents: read    # This is required for actions/checkout@v1
      packages: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:  
  tag-and-build:
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '+tag-skip') != true
    runs-on: ubuntu-latest      
    steps:

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"

      - name: Login to docker
        if: |
          ${{ steps.skip_dk_build.outputs.bypass_dk_build !='true' && steps.get_deployment_type.outputs.deployment_type == 'image' }}
        uses: docker/login-action@v1
        with:
          registry: ${{env.IMAGE_REGISTRY}}
          username: ${{env.IMAGE_REGISTRY_USERNAME}}
          password: ${{env.IMAGE_REGISTRY_TOKEN}}
      
      # Clone repositories prior to work
      - name: Git clone the repository
        uses: actions/checkout@v1


    # https://github.com/marketplace/actions/github-tag-with-semantic-versioning
      - uses: actions/checkout@master
      - name: Github Tag with semantic versioning
        id: version_number
        uses: hennejg/github-tag-action@v4.3.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: minor
          tag_prefix: v
          release_branches: main
      - name: Version number
        run: |
          echo "${{ steps.version_number.outputs.new_version }} is the new version"
          echo "TAG_VERSION=${{ steps.version_number.outputs.new_version }}" >> $GITHUB_ENV
      
      - name: Make project files directory
        run: mkdir ${{env.PROJECT_FILES_DIRECTORY}}

      - name: Project files clone
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.envPAT }}
          repository: pallcorporation/beer-project-properties
          ref: main
          path: ${{env.PROJECT_FILES_DIRECTORY}}
      
      # Grant permissions to all files in directory
      - name: Grant permissions to all files
        run: chmod -R 755 ./  
      
      # Get branch name to use for look up
      - name: Branch name
        id: get_branch_name
        run: |
          echo "##[set-output name=branch_name;]$(echo ${{inputs.branch_name}})"
          echo ${{ steps.get_branch_name.outputs.branch}}
          ls
        
      # Read of project files and set to variables
      - name: Get project constants from project.properties repo - Branch name, deployment role, skip cdk, destroy stack
        id: project_constants
        run: |
          account_id="`grep aws_${{ steps.get_branch_name.outputs.branch_name }}_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=env_id::${account_id}"
          
          oidc_role_name="`grep aws_${{ steps.get_branch_name.outputs.branch_name }}_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=oidc_role::${oidc_role_name}"

          cdk_deploy_role_arn="`grep aws_${{ steps.get_branch_name.outputs.branch_name }}_cdk_deployment_role ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=cdk_deploy::${cdk_deploy_role_arn}"
          
          aws_bucket="`grep aws_frontend_bucket ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=aws_bucket_name::${aws_bucket}"
          echo $aws_bucket

          cloud_front_id="`grep aws_${{ steps.get_branch_name.outputs.branch_name }}_cloudfront_id ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=aws_cloud_front_id::${cloud_front_id}"
        working-directory: ${{env.PROJECT_FILES_DIRECTORY}}

      # Role that will be used for OIDC. This is the role this session will assume when connecting to AWS         
      - name: Arn to use
        id: aws_assume_role
        run: |
          echo "::set-output name=role_arn1::arn:aws:iam::${{ steps.project_constants.outputs.env_id }}:role/${{ steps.project_constants.outputs.oidc_role}}"
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{steps.aws_assume_role.outputs.role_arn1}}
          role-session-name: ${{ github.event.repository.name }}-${{ steps.date.outputs.date }}
          aws-region: ${{ env.AWS_REGION }}
      
      # Installing npm
      - name: Setup node.js environment
        uses: actions/setup-node@v2.1.2

      - name: Npm install
        run: |
          npm install

      - name: NX Build
        id: build_nx
        if: ${{inputs.deployment_type}} == nx
        run: |
          echo "Building NX... $TAG_VERSION"
      
      - name: Web Build
        id: build_web
        if: ${{inputs.deployment_type}} == web
        run: |
          echo "Building Web... $TAG_VERSION"
      
      - name: Docker image build
        id: build_docker
        if: ${{inputs.deployment_type}} == image
        run: |
          echo "Building NX... $TAG_VERSION"

          
      
        