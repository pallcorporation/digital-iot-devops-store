name: Release Tagging

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - main

  workflow_call:
    inputs:
      deployment_type:
        required: true
        type: string
      branch_name:
        type: string

    secrets:
      envPAT:
        required: true
      teams_uri:
        required: false

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  #BUCKET_NAME : "github-oidc-test-mitch"
  AWS_REGION : "us-east-1"
  PROJECT_FILES_GIT : "beer-project-properties.git"
  ORGANIZATION: "pallcorporation"
  PROJECT_FILES_NAME: "project.properties"
  PROJECT_FILES_DIRECTORY: "project_file"
  IMAGE_REGISTRY: "ghcr.io"
  IMAGE_REGISTRY_USERNAME: ${{github.actor}}
  IMAGE_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}


permissions:
      id-token: write
      contents: read    # This is required for actions/checkout@v1
      packages: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:  
  tag-and-build:
    if: (github.repository != 'pallcorporation/digital-iot-devops-store' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest          
    steps:

        - name: Get current date
          id: date
          run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"

        - name: Login to docker
          if: |
            ${{ steps.skip_dk_build.outputs.bypass_dk_build !='true' && inputs.deployment_type == 'image' }}
          uses: docker/login-action@v1
          with:
            registry: ${{env.IMAGE_REGISTRY}}
            username: ${{env.IMAGE_REGISTRY_USERNAME}}
            password: ${{env.IMAGE_REGISTRY_TOKEN}}
        
        # Clone repositories prior to work
        - name: Git clone the repository
          uses: actions/checkout@v2

        - name: Make project files directory
          run: mkdir ${{env.PROJECT_FILES_DIRECTORY}}

        - name: Project files clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/beer-project-properties
            ref: main
            path: ${{env.PROJECT_FILES_DIRECTORY}}
        
        # Grant permissions to all files in directory
        - name: Grant permissions to all files
          run: chmod -R 755 ./  
          
        # Read of project files and set to variables
        - name: Get project constants from project.properties
          id: project_constants
          run: |
            account_id="`grep aws_tools_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=env_id::${account_id}"
            echo "AWS_ENVRIONMENT=${account_id}" >> $GITHUB_ENV
            

            oidc_role_name="`grep aws_tools_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=oidc_role::${oidc_role_name}"

          working-directory: ${{env.PROJECT_FILES_DIRECTORY}}

        # Role that will be used for OIDC. This is the role this session will assume when connecting to AWS         
        - name: Arn to use
          id: aws_assume_role
          run: |
            echo "::set-output name=role_arn1::arn:aws:iam::$AWS_ENVRIONMENT:role/${{ steps.project_constants.outputs.oidc_role}}"
            echo "AWS_ACCESS_ROLE=arn:aws:iam::$AWS_ENVRIONMENT:role/${{ steps.project_constants.outputs.oidc_role}}" >> $GITHUB_ENV

        - name: Image Repository name
          run: |
            echo "IMAGE_REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{steps.aws_assume_role.outputs.role_arn1}}
            role-session-name: ${{ github.event.repository.name }}-${{ steps.date.outputs.date }}
            aws-region: ${{ env.AWS_REGION }}
      
      # https://github.com/marketplace/actions/github-tag-with-semantic-versioning
       # - uses: actions/checkout@2
        - name: Github Tag with semantic versioning
          id: version_number
          uses: hennejg/github-tag-action@v4.3.1
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            default_bump: minor
            tag_prefix: v
            release_branches: main
        - name: Version number
          run: |
            echo "${{ steps.version_number.outputs.new_version }} is the new version"
            echo "TAG_VERSION=${{ steps.version_number.outputs.new_version }}" >> $GITHUB_ENV

        
        
        - name: Create image tags
          if: ${{inputs.deployment_type == 'image' }}
          run: |
            echo DOCKER_TAG_VERSION="${{ steps.project_constants.outputs.env_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${IMAGE_REPO_NAME}:$TAG_VERSION" >> $GITHUB_ENV
            echo DOCKER_TAG_LATEST="${{ steps.project_constants.outputs.env_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${IMAGE_REPO_NAME}:latest" >> $GITHUB_ENV
            echo GHCR_IMAGE_ID="ghcr.io/${{github.repository_owner}}/${IMAGE_REPO_NAME}:$TAG_VERSION" >> $GITHUB_ENV
  
        - name: Build Docker images
          if: ${{inputs.deployment_type == 'image'}}
          id: build_images
          run: |
            docker build -t $DOCKER_TAG_VERSION .
            docker tag $DOCKER_TAG_VERSION $DOCKER_TAG_LATEST
            docker tag $DOCKER_TAG_VERSION $GHCR_IMAGE_ID

        #- name: ECR Login
        #  if: ${{inputs.deployment_type == 'image'}}
        #  id: ecr_login
        #  run: |
        #    aws ecr describe-repositories --repository-names ${IMAGE_REPO_NAME} || aws ecr create-repository --repository-name ${IMAGE_REPO_NAME}
        #    aws ecr get-login-password --region ${{ env.AWS_REGION }}| docker login --username AWS --password-stdin ${{ steps.project_constants.outputs.env_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

        - name: ECR Login
          id: ecr_login
          run: |
            (aws ecr describe-repositories \
            --repository-names ${IMAGE_REPO_NAME} \
            && echo "::set-output name=repo_created::false" ) || \
            ( aws ecr create-repository \
            --repository-name ${IMAGE_REPO_NAME} \
            && echo "::set-output name=repo_created::true" )

            aws ecr get-login-password \
            --region ${{ env.AWS_REGION }}| docker login \
            --username AWS \
            --password-stdin ${AWS_ENVRIONMENT}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        
        - name: Get project constants from project.properties repo - Branch name, deployment role, skip cdk, destroy stack
          run: |
            beta_account_id="`grep aws_beta_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=env_id::${beta_account_id}"
            echo "AWS_BETA_ENVRIONMENT=${beta_account_id}" >> $GITHUB_ENV

            prod_account_id="`grep aws_production_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=env_id::${prod_account_id}"
            echo "AWS_PRODUCTION_ENVRIONMENT=${prod_account_id}" >> $GITHUB_ENV
          working-directory: ${{env.PROJECT_FILES_DIRECTORY}}


        - name: Make ecr policy for Beta
          run: |
            cat >./tools-cross-ecr-policy.json << EOF
            {
              "Version": "2008-10-17",
              "Statement": [
                {
                  "Sid": "allowPallpull",
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": [
                      "arn:aws:iam::${{env.AWS_BETA_ENVRIONMENT}}:root",
                      "arn:aws:iam::${{env.AWS_PRODUCTION_ENVRIONMENT}}:root"
                    ]
                  },
                  "Action": [
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:BatchGetImage",
                    "ecr:GetDownloadUrlForLayer"
                  ]
                }
              ]
            }
            EOF
            

        - name: Set repository policy for Beta & Production
          run: |
            aws ecr set-repository-policy \
            --repository-name ${IMAGE_REPO_NAME} \
            --policy-text file://tools-cross-ecr-policy.json

        - name: Push docker images to ECR & GHCR
          if: ${{inputs.deployment_type == 'image' }}
          run: |
            docker push $DOCKER_TAG_VERSION
            docker push $DOCKER_TAG_LATEST
            docker push $GHCR_IMAGE_ID

        
        # Installing npm
        - name: Setup node.js environment
          uses: actions/setup-node@v2.1.2

        - name: NX Build
          id: build_nx
          if: ${{inputs.deployment_type == 'nx' }}
          run: |
            echo "Building NX... $TAG_VERSION"
        
        - name: Web Build
          id: build_web
          if: ${{inputs.deployment_type == 'web' }}
          run: |
            echo "Building Web... $TAG_VERSION"
        
        - name: Docker image build
          id: build_docker
          if: ${{inputs.deployment_type == 'image' }}
          run: |
            echo "Building NX... $TAG_VERSION"
        
        #- name: Build Changelog
        #  id: github_release
        #  uses: mikepenz/release-changelog-builder-action@v1
        #  env:
        #    GITHUB_TOKEN: ${{ secrets.envPAT }}
        #- name: Print Changelog
        #  run: |
        #    echo ${{steps.github_release.outputs.changelog}}
        
        - name: Microsoft Teams Notification
          if: success()
          uses: jdcargile/ms-teams-notification@v1.3
          with:
            github-token: ${{ secrets.envPAT }} # this will use the runner's token.
            ms-teams-webhook-uri: ${{ secrets.teams_uri }}
            notification-summary: "Build Successful &#x2705; : v${{ steps.version_number.outputs.new_version }}"
            notification-color: 00FF00
            timezone: America/New_York
        
        - name: Microsoft Teams Notification
          if: failure()
          uses: jdcargile/ms-teams-notification@v1.3
          with:
            github-token: ${{ secrets.envPAT }} # this will use the runner's token.
            ms-teams-webhook-uri: ${{ secrets.teams_uri }}
            notification-summary: "Build Error &#x274C; : Please check workflow"
            notification-color: FF0000
            timezone: America/New_York