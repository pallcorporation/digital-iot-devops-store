name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  #push:
  #  branches:
  #    - dev
  #    - integration
  workflow_call:
    inputs:
      branch_name:
        required: true
        type: string

      config_files_directory:
        required: true
        type: string

      hosting_bucket:
        required: true
        type: string
      hosting_bucket_key_name:
        required: true
        type: string
      in_stack_id:
        required: true
        type: string

      in_cloudfront_url_output_to_query:
        required: true
        type: string

      in_cloudfront_output:
        required: true
        type: string

    secrets:
      envPAT:
        required: true
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  #BUCKET_NAME : "github-oidc-test-mitch"
  AWS_REGION: "us-east-1"
  PROJECT_FILES_GIT: "coalescer-project-properties.git"
  ORGANIZATION: "pallcorporation"
  PROJECT_FILES_NAME: "project.properties"
  PROJECT_FILES_DIRECTORY: "coalescer-project-properties"
  CDK_MODULE: "cdk_checkedout"
  DEVOPS_STORE: "devops_store"

permissions:
  id-token: write
  contents: read # This is required for actions/checkout@v1
  packages: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  AWS-CDK-Deployment:
    if: (github.repository != 'pallcorporation/digital-iot-devops-store')
    runs-on: ubuntu-latest

    steps:
      # Get current time stamp to use as reference elsewhere
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%dT%H%M%S')" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3

        # Node installation (if required)
      - name: Setup node.js environment
        uses: actions/setup-node@v4

      - name: Branch if Dev
        # if: contains( github.ref, 'dev' )
        run: |
          echo "BRANCH_NAME=dev" >> $GITHUB_ENV

      # - name: Branch if Integration
      #   if: contains( github.ref, 'integration' )
      #   run: |
      #     echo "BRANCH_NAME=integration" >> $GITHUB_ENV

      # - name: Branch if Main
      #   run: |
      #     echo "BRANCH_NAME=production" >> $GITHUB_ENV

      # - name: Branch if BETA
      #   if: contains( github.ref, 'beta' )
      #   run: |
      #     echo "BRANCH_NAME=beta" >> $GITHUB_ENV

      - name: Echo branch
        run: echo "${BRANCH_NAME} is the branch name to use in lookup"

      - name: Build directory react
        if: ${{inputs.build_project_type == 'react' }}
        run: |
          echo "BUILD_DIRECTORY=build" >> $GITHUB_ENV

      - name: Build directory echo
        run: echo $BUILD_DIRECTORY
      # Clone repositories prior to work

      - name: Make project files directory
        run: mkdir ${{env.PROJECT_FILES_DIRECTORY}}

      - name: Make cdk directory
        run: mkdir ${{env.CDK_MODULE}}

      - name: Make devops store directory
        run: mkdir ${{env.DEVOPS_STORE}}

      - name: Project files clone
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.envPAT }}
          repository: pallcorporation/coalescer-project-properties
          ref: main
          path: ${{env.PROJECT_FILES_DIRECTORY}}

      - name: CDK Modules clone
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.envPAT }}
          repository: pallcorporation/digital-iot-devops-cdk-modules
          ref: main
          path: ${{env.CDK_MODULE}}

      # Grant permissions to all files in directory
      - name: Grant permissions to all files
        run: chmod -R 755 ./

      # Read of project files and set to variables
      - name: Get project constants from project.properties repo
        id: project_constants
        run: |
          account_id="`grep aws_${BRANCH_NAME}_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "AWS_ENVIRONMENT=${account_id}" >> $GITHUB_ENV

          oidc_role_name="`grep aws_${BRANCH_NAME}_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "OIDC_ROLE_NAME=${oidc_role_name}" >> $GITHUB_ENV
        working-directory: ${{env.PROJECT_FILES_DIRECTORY}}

      - name: Copy cdk config files
        run: |
          rm -r ${{env.CDK_MODULE}}/config_files/*
          cp -a ${{inputs.config_files_directory}}/. ${{env.CDK_MODULE}}/config_files/
          cp -a ${{env.PROJECT_FILES_DIRECTORY}}/. ${{env.CDK_MODULE}}/

      # Role that will be used for OIDC. This is the role this session will assume when connecting to AWS
      - name: Arn to use
        id: aws_assume_role
        run: |
          echo "OIDC_ROLE_ARN=arn:aws:iam::${{ env.AWS_ENVIRONMENT }}:role/${{ env.OIDC_ROLE_NAME}}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{env.OIDC_ROLE_ARN}}
          role-session-name: ${{ github.event.repository.name }}-${{ env.date }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Application dependency installation
        run: |
          npm install --force

      - name: Create React environment varibles file
        run: |
          pip3 install boto3
          pip3 install jproperties
          if [ -f .env ]; then
            rm .env
          fi
          python3 ${{env.PROJECT_FILES_DIRECTORY}}/create_env_file.py
          cat .env

      - name: Build react Frontend
        run: |
          npm run build

      - name: Install yaml
        run: |
          pip install pyyaml
          sudo npm install -g aws-cdk

      - name: Stack id to query
        run: |
          echo "IN_STACK_ID=${{inputs.in_stack_id}}" >> $GITHUB_ENV

      - name: Cloudfront id output
        run: |
          echo "CF_ID_OUTPUT=${{inputs.in_cloudfront_output}}cfoutput" >> $GITHUB_ENV

      - name: Cloudfront URL output
        run: |
          echo "CF_URL_OUTPUT=${{inputs.in_cloudfront_url_output_to_query}}cfurloutput" >> $GITHUB_ENV

      # Upload a file to AWS s3
      - name: Deploy to S3 - Copy Build folder to s3
        run: |

          HOSTING_BUCKET=$(aws cloudformation --region ${{ env.AWS_REGION }} describe-stacks --stack-name ${{inputs.in_stack_id}} --query "Stacks[0].Outputs[?OutputKey=='${{inputs.hosting_bucket_key_name}}'].OutputValue" --output text)
          aws s3 sync ./build s3://${HOSTING_BUCKET}

      - name: Invalidate cloudfront cache
        run: |
          echo ${CF_ID_OUTPUT} is the output id
          CLOUDFRONT_ID=$(aws cloudformation --region ${{ env.AWS_REGION }} describe-stacks --stack-name ${{inputs.in_stack_id}} --query "Stacks[0].Outputs[?OutputKey=='${CF_ID_OUTPUT}'].OutputValue" --output text)
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths '/*'

      - name: Domain url
        id: domain_url
        run: |
          DOMAIN_URL=$(aws cloudformation --region ${{ env.AWS_REGION }} describe-stacks --stack-name ${IN_STACK_ID} --query "Stacks[0].Outputs[?OutputKey=='${CF_URL_OUTPUT}'].OutputValue" --output text)
          echo "::set-output name=DOMAIN_URL_OUTPUT::$DOMAIN_URL"

      - name: Echo Domain URL
        run: |
          echo "::warning::https://${{ steps.domain_url.outputs.DOMAIN_URL_OUTPUT}} is the cloudfront url"

    outputs:
      domain_url: ${{ steps.domain_url.outputs.DOMAIN_URL_OUTPUT}}
