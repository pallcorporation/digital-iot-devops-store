name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push 
  push:
   branches:
     - dev
     - beta
     - main
  workflow_call:
    inputs:
      APP_NAME:
        type: string
      ARTIFACT_NAME:
        type: string
      ARTIFACT_DESCRIPTION:
        type: string
      UPLOAD_NAME:
        type: string

    secrets:
      envPAT:
        required: true
      PY_KEY:
        required: true
      APP_SIGN_KEY:
        required: true

        
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  #BUCKET_NAME : "github-oidc-test-mitch"
  AWS_REGION : "us-east-1"
  PROJECT_FILES_GIT : "beer-project-properties.git"
  ORGANIZATION: "pallcorporation"
  PROJECT_FILES_NAME: "project.properties"
  PROJECT_FILES_DIRECTORY: "project_file"
  CDK_MODULE: "cdk_checkedout"
  DEVOPS_STORE: "devops_store"
  ARTIFACT_NAME: ${{ inputs.ARTIFACT_NAME }}
  APP_NAME: ${{ inputs.APP_NAME}}
  UPLOAD_NAME: ${{ inputs.UPLOAD_NAME }}
  ARTIFACT_DESCRIPTION: ${{ inputs.ARTIFACT_DESCRIPTION }}
  PY_KEY: ${{ secrets.PY_KEY }}
  APP_SIGN_KEY: ${{ secrets.APP_SIGN_KEY }}
  
permissions:
      id-token: write
      contents: read    # This is required for actions/checkout@v1
      packages: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    if: github.repository != 'pallcorporation/digital-iot-devops-store'
    runs-on: ubuntu-latest
    outputs:
      aws_account: ${{ steps.project_constants.outputs.env_id }}
      oidc_role: ${{ steps.project_constants.outputs.oidc_role }}
      aws_assume_role: ${{ steps.aws_assume_role.outputs.role_arn1}}
      branch_name: ${{ env.BRANCH_NAME }}
      bucket_name: ${{ steps.project_constants.outputs.bucket_name }}
      date_timestamp: ${{ steps.project_constants.outputs.date}}
      release_version: ${{ env.TAG_VERSION }}
    steps:
      # Get current time stamp to use as reference elsewhere
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"
      
      - name: Branch if Dev
        if: contains( github.ref, 'dev' )
        run: |
          echo "BRANCH_NAME=dev" >> $GITHUB_ENV
        
      - name: Branch if Main
        if: contains( github.ref, 'main' )
        run: |
          echo "BRANCH_NAME=prod" >> $GITHUB_ENV
      
      - name: Branch if BETA
        if: contains( github.ref, 'beta' )
        run: |
          echo "BRANCH_NAME=beta" >> $GITHUB_ENV
          
      
      - name: Echo branch
        run: echo "${BRANCH_NAME} is the branch name to use in lookup"

      - name: Project files clone
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.envPAT }}
          repository: pallcorporation/oeno-project-properties
          ref: main
          path: ${{env.PROJECT_FILES_DIRECTORY}}

      - name: Get project constants from project.properties repo - Branch name, deployment role, skip cdk, destroy stack
        id: project_constants
        run: |
          account_id="`grep aws_${BRANCH_NAME}_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=env_id::${account_id}"
          echo $account_id is the account id
          echo "AWS_ACCOUNT=${account_id}" >> $GITHUB_ENV
          
          oidc_role_name="`grep aws_${BRANCH_NAME}_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo $oidc_role_name is the role name
          echo "::set-output name=oidc_role::${oidc_role_name}"

          cdk_deploy_role_arn="`grep aws_${BRANCH_NAME}_cdk_deployment_role ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=cdk_deploy::${cdk_deploy_role_arn}"

          bucket_name="`grep aws_${BRANCH_NAME}_software_bucket ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo $bucket_name is the bucket name
          echo "::set-output name=bucket_name::${bucket_name}"
          
        working-directory: ${{env.PROJECT_FILES_DIRECTORY}}
      
      - name: Arn to use
        id: aws_assume_role
        run: |
          echo "::set-output name=role_arn1::arn:aws:iam::${{ steps.project_constants.outputs.env_id }}:role/${{ steps.project_constants.outputs.oidc_role}}"

      - name: Git clone the repository
        uses: actions/checkout@v2

      - name: Beta Tag
        if: github.ref == 'refs/heads/beta'
        id: version_number_beta
        uses: hennejg/github-tag-action@v4.3.1
        with:
          github_token: ${{ secrets.envPAT }}
          default_bump: patch
          tag_prefix: v
          release_branches: beta
      
      - name: Prod Tag
        if: github.ref == 'refs/heads/main'
        id: version_number_prod
        uses: hennejg/github-tag-action@v4.3.1
        with:
          github_token: ${{ secrets.envPAT }}
          default_bump: minor
          tag_prefix: v
          release_branches: main

      - name: Version number
        if: github.ref == 'refs/heads/beta'
        run: |
          echo "${{ steps.version_number_beta.outputs.new_version }} is the new version"
          echo "TAG_VERSION=${{ steps.version_number_beta.outputs.new_version }}" >> $GITHUB_ENV

      - name: Version number
        if: github.ref == 'refs/heads/main'
        run: |
          echo "${{ steps.version_number_prod.outputs.new_version }} is the new version"
          echo "TAG_VERSION=${{ steps.version_number_prod.outputs.new_version }}" >> $GITHUB_ENV

      - name: Version number
        if: github.ref == 'refs/heads/dev'
        run: echo "TAG_VERSION=0.0.0" >> $GITHUB_ENV
 
  AWS-WIN-EXE-BUILD:
    needs: setup
    if: github.repository != 'pallcorporation/digital-iot-devops-store'
    runs-on: windows-2019
      
    steps:      
        - name: Git clone the repository
          uses: actions/checkout@v2

         # Get branch name to use for look up
        - name: Branch if Dev
          if: contains( github.ref, 'dev' )
          run: |
            echo "BRANCH_NAME=dev" >> $GITHUB_ENV
        
        - name: Branch if Main
          if: contains( github.ref, 'main' )
          run: |
            echo "BRANCH_NAME=prod" >> $GITHUB_ENV
        
        - name: Branch if BETA
          if: contains( github.ref, 'beta' )
          run: |
            echo "BRANCH_NAME=beta" >> $GITHUB_ENV
                    
        - name: Echo branch
          run: echo "${BRANCH_NAME} is the branch name to use in lookup"

        # do a look up by branch for AWS account number
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{ needs.setup.outputs.aws_assume_role }}
            role-session-name: ${{ github.event.repository.name }}-${{ needs.setup.outputs.date_timestamp }}
            aws-region: ${{ env.AWS_REGION }}
                
        - name: Set up build env
          run: |
            python --version
            python -m venv env
            env\scripts\Activate

        - name: Install dependencies
          run: |    
            env\scripts\pip install -r requirements.txt
            env\scripts\pip install pyinstaller pyinstaller[encryption] tinyaes

        - name: Copy static assets
          run: |
            cp -r env\Lib\site-packages\dash* env\Include
            ls env\Include

        - name: Generate version info 
          run: |
            echo ${{ needs.setup.outputs.release_version }} app version
            python generateVersionInfo.py -v "${{ needs.setup.outputs.release_version }}" -n "${{env.APP_NAME}}" -d "${{env.ARTIFACT_DESCRIPTION}}"
            
        - name: Build encrypted exe via Pyinstaller    
          run: |
            cd service
            ..\env\scripts\pyinstaller -y --icon .\assets\icon.ico --version-file .\assets\versioninfo --onefile --add-data "../env/Include;./" --key=${{env.PY_KEY}} ${{ env.APP_NAME }}.py

        - name: Sign application
          run: |
            cd service 
            C:\"Program Files (x86)"\"Windows Kits"\10\bin\x64\signtool.exe sign /debug /F ..\oenoflow_prod.pfx /P ${{ env.APP_SIGN_KEY }} /T http://timestamp.digicert.com ..\service\dist\${{ env.ARTIFACT_NAME }}
        
        - name: Bundle deployment assets
          run: |
            cp .\service\dist\${{ env.ARTIFACT_NAME }} .\ota\${{ env.ARTIFACT_NAME }}
            
        # Upload artifacts to Git for easy access
        - uses: actions/upload-artifact@v2
          with:
            name: ${{ env.APP_NAME }}
            path: ota/
            
        # Upload artifacts to AWS s3 to trigger OTA
        - name:  Deploy to S3 - Copy Build folder to s3
          run: |
             cd ota
             Compress-Archive -Path * -DestinationPath ${{ env.UPLOAD_NAME}}.zip  
             aws s3 cp ${{ env.UPLOAD_NAME}}.zip s3://${{needs.setup.outputs.bucket_name}}/packageUpdates/${{ env.UPLOAD_NAME}}/



      
        

              


        

