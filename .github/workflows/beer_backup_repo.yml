name: Back up repository

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - '*'

  workflow_call:
    inputs:
      
      branch_name:
        type: string

    secrets:
      envPAT:
        required: true
      teams_uri:
        required: false

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  #BUCKET_NAME : "github-oidc-test-mitch"
  AWS_REGION : "us-east-1"
  PROJECT_FILES_GIT : "beer-project-properties.git"
  ORGANIZATION: "pallcorporation"
  PROJECT_FILES_NAME: "project.properties"
  PROJECT_FILES_DIRECTORY: "project_file"
  IMAGE_REGISTRY: "ghcr.io"
  IMAGE_REGISTRY_USERNAME: ${{github.actor}}
  IMAGE_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NX_ARTIFACT_STORE: beer-ul-nx-workspace


permissions:
      id-token: write
      contents: read    # This is required for actions/checkout@v1
      packages: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:  
  main-setup:
    if: (github.repository != 'pallcorporation/digital-iot-devops-store' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    outputs:
      data: ${{ steps.date.outputs.date }}
      repo_version: ${{ steps.version_number.outputs.new_version }}     
      tools_account: ${{steps.project_constants.outputs.tools_account_id}}
      aws_credentials_role: ${{steps.aws_assume_role.outputs.role_arn1}}
      aws_credentials_session_name: ${{ github.event.repository.name }}-${{ steps.date.outputs.date }}
      AWS_BETA_ACCOUNT_ID: ${{steps.project_constants.outputs.beta_account_id }}
      AWS_PRODUCTION_ACCOUNT_ID: ${{steps.project_constants.outputs.prod_account_id }}
      AWS_BETA_ACCOUNT_DEPLOY: ${{steps.project_constants.outputs.beta_account_deploy }}
      AWS_PRODUCTION_ACCOUNT_DEPLOY: ${{steps.project_constants.outputs.prod_account_deploy }}
    steps:
        - name: Get current date
          id: date
          run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"
        
        # Clone repositories prior to work
        - name: Git clone the repository
          uses: actions/checkout@v2

        - name: Make project files directory
          run: mkdir ${{env.PROJECT_FILES_DIRECTORY}}

        - name: Project files clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/beer-project-properties
            ref: main
            path: ${{env.PROJECT_FILES_DIRECTORY}}
        
        # Grant permissions to all files in directory
        - name: Grant permissions to all files
          run: chmod -R 755 ./  
          
        # Read of project files and set to variables
        - name: Get project constants from project.properties
          id: project_constants
          run: |
            account_id="`grep aws_tools_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=tools_account_id::${account_id}"
            
            oidc_role="`grep aws_tools_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=oidc_role_name::${oidc_role}"

            beta_account="`grep aws_beta_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=beta_account_id::${beta_account}"

            prod_account="`grep aws_production_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=prod_account_id::${prod_account}"


            beta_account="`grep aws_beta_cdk_deployment_role ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=beta_account_deploy::${beta_account}"


            prod_account="`grep aws_production_cdk_deployment_role ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=prod_account_deploy::${prod_account}"


          working-directory: ${{env.PROJECT_FILES_DIRECTORY}}

        # Role that will be used for OIDC. This is the role this session will assume when connecting to AWS         
        - name: Arn to use
          id: aws_assume_role
          run: |
            echo "::set-output name=role_arn1::arn:aws:iam::${{steps.project_constants.outputs.tools_account_id}}:role/${{ steps.project_constants.outputs.oidc_role_name}}"
            echo "AWS_ACCESS_ROLE=arn:aws:iam::${{steps.project_constants.outputs.tools_account_id}}:role/${{ steps.project_constants.outputs.oidc_role_name}}" >> $GITHUB_ENV
        
  back-up:
    needs: main-setup
    if: (github.repository != 'pallcorporation/digital-iot-devops-store')
    runs-on: ubuntu-latest          
    steps:
        - name: Get current date
          id: date
          run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"
        
        # Clone repositories prior to work
        - name: Git clone the repository
          uses: actions/checkout@v2
        
        - name: Image Repository name
          run: |
            echo "REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{ needs.main-setup.outputs.aws_credentials_role }}
            role-session-name: ${{needs.main-setup.outputs.aws_credentials_session_name}}
            aws-region: ${{ env.AWS_REGION }}
        
        - name: Create repo if doesn't exist in AWS Tools account
          run: |
            aws codecommit get-repository --repository-name ${{env.REPO_NAME}} || aws codecommit create-repository --repository-name ${{env.REPO_NAME}}
            
        - name: Make repo directory
          run: mkdir ${{env.REPO_NAME}}_stage

        - name: Check out ${{env.REPO_NAME}}
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/${{env.REPO_NAME}}
            ref: main
            path: ${{env.REPO_NAME}}_stage
        
        - name: Commit commit work
          run: |
            cd ${{env.REPO_NAME}}_stage
            git config --local init.defaultBranch dev
            git init
            git add .
            git commit -m "initial commit"
            git push https://git-codecommit.${{ env.AWS_REGION }}.amazonaws.com/v1/repos/${{env.REPO_NAME}} --all