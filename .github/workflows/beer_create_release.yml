name: Create Release

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  workflow_call:
    inputs:
      version_number:
        required: true
        type: string
    secrets:
      envPAT:
        required: true
      teams_uri:
        required: false

env:
  #BUCKET_NAME : "github-oidc-test-mitch"
  AWS_REGION : "us-east-1"
  PROJECT_FILES_GIT : "beer-project-properties.git"
  ORGANIZATION: "pallcorporation"
  PROJECT_FILES_NAME: "project.properties"
  PROJECT_FILES_DIRECTORY: "beer-project-properties"
  IMAGE_REGISTRY: "ghcr.io"
  IMAGE_REGISTRY_USERNAME: ${{github.actor}}
  IMAGE_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NX_ARTIFACT_STORE: beer-ul-nx-workspace

permissions:
  id-token: write
  contents: read    # This is required for actions/checkout@v1
  packages: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Project files clone
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.envPAT }}
          repository: pallcorporation/beer-project-properties
          ref: main
          path: ${{env.PROJECT_FILES_DIRECTORY}}
        
      - name: Release assets clone
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.envPAT }}
          repository: pallcorporation/beer-release-assets
          ref: main
          path: beer-release-assets
      
      # Grant permissions to all files in directory
      - name: Grant permissions to all files
        run: chmod -R 755 ./  
        
      # Read of project files and set to variables
      - name: Get project constants from project.properties
        id: project_constants
        run: |
          account_id="`grep aws_tools_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=tools_account_id::${account_id}"

          oidc_role="`grep aws_tools_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=oidc_role_name::${oidc_role}"

          beta_account="`grep aws_beta_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=beta_account_id::${beta_account}"

          prod_account="`grep aws_production_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=prod_account_id::${prod_account}"

          beta_oidc_role="`grep aws_beta_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=beta_oidc_role::${beta_oidc_role}"

          prod_oidc_role="`grep aws_production_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=prod_oidc_role::${prod_oidc_role}"

          beta_account_cdk_deploy="`grep aws_beta_cdk_deployment_role ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=beta_account_deploy::${beta_account_cdk_deploy}"

          prod_account_cdk_deploy="`grep aws_production_cdk_deployment_role ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=prod_account_deploy::${prod_account_cdk_deploy}"
        working-directory: ${{env.PROJECT_FILES_DIRECTORY}}

      # Role that will be used for OIDC. This is the role this session will assume when connecting to AWS         
      - name: Tools Arn to use
        id: aws_assume_role
        run: |
          echo "::set-output name=role_arn1::arn:aws:iam::${{steps.project_constants.outputs.tools_account_id}}:role/${{ steps.project_constants.outputs.oidc_role_name}}"
      
      - name: Jira Username & Secret name
        run: |
          echo "JIRA_API_USER=mitchell_boulay@pall.com" >> $GITHUB_ENV
          echo "AWS_SECRET_NAME_JIRA=Jira-API-Token-MitchellBoulay" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{ steps.aws_assume_role.outputs.role_arn1 }}
          role-session-name: ${{ github.event.repository.name }}-${{ steps.date.outputs.date }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Install release assets requirements
        run: |
          pip3 install -r beer-release-assets/requirements.txt
      
      - name: Get release name from jira
        run: |
          python3 beer-release-assets/current_brew_jira_release.py > release.txt
          echo "RELEASE_NAME=$(cat release.txt)" >> $GITHUB_ENV

      - name: Changelog
        uses: scottbrenner/generate-changelog-action@master
        id: Changelog

      - name: Release
        id: create_release
        uses: softprops/action-gh-release@master
        with:
          body: ${{ steps.Changelog.outputs.changelog }}
          token: ${{ secrets.envPAT }}
          name: ${{env.RELEASE_NAME}} v${{ inputs.version_number }}
          tag_name: v${{ inputs.version_number }}
    
      - name: File name of chagelog
        run:
          echo "CHANGELOG_FILE=${{ github.event.repository.name }}_v${{ inputs.version_number }}.md" >> $GITHUB_ENV

      - name: Copy release file to s3
        run: echo ${{ steps.Changelog.outputs.changelog }} > ${{env.CHANGELOG_FILE}}
      
      # Upload artifacts to Git for easy access
      - uses: actions/upload-artifact@v2
        with:
          name: ${{env.CHANGELOG_FILE}}
          path: ${{env.CHANGELOG_FILE}}