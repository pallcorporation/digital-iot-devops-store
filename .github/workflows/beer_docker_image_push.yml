name: Push Docker Image to Function
# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string

      repo_version:
        required: true
        type: string

      docker_image_lambda_function_exception:
        type: string
    secrets:
        envPAT:
          required: true
  workflow_dispatch:
  
env:
  AWS_REGION : "us-east-1"
  PROJECT_FILES_GIT : "beer-project-properties.git"
  ADMIN_USERS_POLICY_SEED: beer-ul-admin-users
  IAM_SERVICE_REPOSITORY: beer-be-iam-service
  COGNITO_USER_POOL_STACK_ID: beer-cognito-0-user-pool
  COGNITO_USER_POOL_ID_OUTPUT: beercognito0userpoolidoutput
  ORGANIZATION: "pallcorporation"
  PROJECT_FILES_NAME: "project.properties"
  PROJECT_FILES_DIRECTORY: "project_file"
  IMAGE_REGISTRY: "ghcr.io"
  IMAGE_REGISTRY_USERNAME: ${{github.actor}}
  IMAGE_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CDK_MODULE: cdk
  POSTMAN_TESTS: "false"

permissions:
    id-token: write
    contents: read    # This is required for actions/checkout@v1
    packages: write
  #testT
jobs:
  lambda-iac-deployment:
    runs-on: ubuntu-latest
    
    steps:
        # Get current time stamp to use as reference elsewhere
        - name: Get current date
          id: date
          run: echo "date=$(date +'%Y%m%dT%H%M%S')" >> $GITHUB_ENV
        
        - name: Set ENV Variables
          run: |
            echo "CDK_MODULE=cdk_checkedout" >> $GITHUB_ENV
            echo "PROJECT_FILES_DIRECTORY=project_file" >> $GITHUB_ENV
            echo "PROJECT_FILES_NAME=project.properties" >> $GITHUB_ENV
        
        - name: Branch if Beta
          if: contains( github.ref, 'beta' )
          run: |
            echo "BRANCH_NAME=beta" >> $GITHUB_ENV
            echo "AWS_ENV_NAME=beta" >> $GITHUB_ENV
        
        - name: Branch if Production
          if: contains( github.ref, 'production' )
          run: |
            echo "BRANCH_NAME=production" >> $GITHUB_ENV
            echo "AWS_ENV_NAME=production" >> $GITHUB_ENV
        
        - name: Make repo directory
          run: mkdir ${{ inputs.repo_name }}_stage
          
        - name: Check out ${{ inputs.repo_name }}
          uses: actions/checkout@v3
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/${{ inputs.repo_name }}
            ref: ${{ inputs.repo_version }}
            path: ${{ inputs.repo_name }}_stage
        
        - name: Make project files directory
          run: mkdir ${{env.PROJECT_FILES_DIRECTORY}}
        
        - name: Make cdk directory
          run: mkdir ${{env.CDK_MODULE}}
        
        - name: Move files (if from application deployment)
          run: mv ${{ inputs.repo_name }}_stage/* .
        
        - name: Project files clone
          uses: actions/checkout@v3
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/beer-project-properties
            ref: main
            path: ${{env.PROJECT_FILES_DIRECTORY}}
        
        - name: CDK Modules clone
          uses: actions/checkout@v3
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/digital-iot-devops-cdk-modules
            ref: main
            path: ${{env.CDK_MODULE}}
            
        # Grant permissions to all files in directory
        - name: Grant permissions to all files
          run: chmod -R 755 ./
        
        - name: Set environment variables for CDK stack
          run: |
            echo "DOCKER_IMAGE_TAG=${{ inputs.repo_version }}" >> $GITHUB_ENV
            echo "DOCKER_IMAGE_REPOSITORY=${{ inputs.repo_name }}" >> $GITHUB_ENV
        
        # Read of project files and set to variables
        - name: Get project constants from project.properties repo - Branch name, deployment role, skip cdk, destroy stack
          id: project_constants
          run: |
            account_id="`grep aws_${BRANCH_NAME}_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "AWS_ENVIRONMENT=${account_id}" >> $GITHUB_ENV
            
            oidc_role_name="`grep aws_${BRANCH_NAME}_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "oidc_role=${oidc_role_name}" >> $GITHUB_ENV

          working-directory: ${{env.PROJECT_FILES_DIRECTORY}}

        
        - name: Copy cdk config files
          run: |
            rm -r ${{env.CDK_MODULE}}/config_files/*
            cp -a cdk_config/. ${{env.CDK_MODULE}}/config_files/
            cp -a ${{env.PROJECT_FILES_DIRECTORY}}/. ${{env.CDK_MODULE}}/
        
        - name: Arn to use
          id: aws_assume_role
          run: |
            echo "AWS_ASSUME_ROLE=arn:aws:iam::${{ env.AWS_ENVIRONMENT }}:role/${{ env.oidc_role}}" >> $GITHUB_ENV
      
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{env.AWS_ASSUME_ROLE}}
            role-session-name: ${{ inputs.repo_name }}-${{ env.date }}
            aws-region: ${{ env.AWS_REGION }}
            
        - name: Install CDK
          run: | 
            chmod -R 755 ${{env.CDK_MODULE}}
            sudo npm install -g aws-cdk
            pip3 install -r  ${{env.CDK_MODULE}}/requirements.txt

        - name: Test cdk synth works
          run: cdk synth
          working-directory: ${{env.CDK_MODULE}}
        
        # *****************PROJECT SPECIFIC ELEMENTS*****************

        # AWS IAC cdk deployment
        # Role to deploy as in defined in project.properties file
        - name: Running cdk deploy
          run: |
            cdk deploy --all --require-approval never
          working-directory: ${{env.CDK_MODULE}}
        
        - name: Lambda function name
          run: |
            function="`grep LAMBDA_FUNCTION_NAME lambda_details.properties|cut -d'=' -f2`"
            echo "LAMBDA_FUNCTION_NAME=${function}" >> $GITHUB_ENV

            image_tag="`grep DOCKER_IMAGE_VERSION lambda_details.properties|cut -d'=' -f2`"
            echo "IMAGE_TAG=${image_tag}" >> $GITHUB_ENV

            image_uri="`grep DOCKER_IMAGE_URI lambda_details.properties|cut -d'=' -f2`"
            echo "DOCKER_IMAGE_URI=${image_uri}" >> $GITHUB_ENV

          working-directory: ${{env.CDK_MODULE}}
        
        - name: Update function with new image built
          run: |
            (aws lambda update-function-code --region ${{ env.AWS_REGION }} --function-name $LAMBDA_FUNCTION_NAME --image-uri $DOCKER_IMAGE_URI ) || ( echo "Function not found" )
