name: Docker Image Builder

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  workflow_call:
    inputs:
      app_runner:
        required: true
        type: string
    secrets:
      envPAT:
        required: true
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_REGION: "us-east-1"
  PROJECT_FILES_GIT: "coalescer-project-properties.git"
  PROJECT_FILES_NAME: "project.properties"
  PROJECT_FILES_DIRECTORY: "project_file"
  IMAGE_REGISTRY: "ghcr.io"
  IMAGE_REGISTRY_USERNAME: ${{github.actor}}
  IMAGE_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  id-token: write
  contents: read # This is required for actions/checkout@v1
  packages: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-docker-image:
    runs-on: ubuntu-latest

    #needs: FindAWSAccount
    steps:
      # Get current time stamp to use as reference elsewhere
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"

      # Read commit message and determine if to skip docker work

      - name: Check if input is null for repo name
        if: ${{inputs.repo_name}}
        id: repo_name_passed
        run: |
          if [ ${{inputs.repo_name}} != "" ]; then
            echo ::set-output name=reponamepassed::true
          else
            echo ::set-output name=reponamepassed::false
          fi

      # Get branch name to use for look up
      - name: Branch if Dev
        if: contains( github.ref, 'dev' )
        run: |
          echo "BRANCH_NAME=dev" >> $GITHUB_ENV

      - name: Branch if Integration
        if: contains( github.ref, 'integration' )
        run: |
          echo "BRANCH_NAME=integration" >> $GITHUB_ENV

      - name: Branch if Production
        if: contains( github.ref, 'production' )
        run: |
          echo "BRANCH_NAME=production" >> $GITHUB_ENV

      - name: Branch if BETA
        if: contains( github.ref, 'beta' )
        run: |
          echo "BRANCH_NAME=beta" >> $GITHUB_ENV

      - name: Branch if Tools
        if: contains( github.ref, 'tools' )
        run: |
          echo "BRANCH_NAME=tools" >> $GITHUB_ENV

      - name: Echo branch
        run: echo "${BRANCH_NAME} is the branch name to use in lookup"

      # Clone repositories prior to work
      - name: Git clone the repository
        uses: actions/checkout@v2

      - name: Make project files directory
        run: mkdir ${{env.PROJECT_FILES_DIRECTORY}}

      - name: Project files clone
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.envPAT }}
          repository: pallcorporation/coalescer-project-properties
          ref: main
          path: ${{env.PROJECT_FILES_DIRECTORY}}

      # Grant permissions to all files in directory
      - name: Grant permissions to all files
        run: chmod -R 755 ./

      # Read of project files and set to variables
      # Read of project files and set to variables
      - name: Get project constants from project.properties repo - Branch name, deployment role, skip cdk, destroy stack
        id: project_constants
        run: |
          account_id="`grep aws_${BRANCH_NAME}_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "AWS_ENVIRONMENT=${account_id}" >> $GITHUB_ENV

        working-directory: ${{env.PROJECT_FILES_DIRECTORY}}

      - name: Arn to use
        id: aws_assume_role
        run: |
          echo "::set-output name=role_arn1::arn:aws:iam::${{ env.AWS_ENVIRONMENT }}:role/beer-github-oidc-access-role"
          echo "AWS_ASSUME_ROLE=arn:aws:iam::${{ env.AWS_ENVIRONMENT }}:role/beer-github-oidc-access-role" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{env.AWS_ASSUME_ROLE}}
          role-session-name: ${{ github.event.repository.name }}-${{ steps.date.outputs.date }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Version number
        #if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '+tag-skip') != true
        run: |
          echo "${{ steps.date.outputs.date }} is the new version"
          echo "TAG_VERSION=${{ steps.date.outputs.date }}" >> $GITHUB_ENV

      - name: Install yaml
        run: |
          pip install pyyaml

      - name: Remove existing project if commited, replace with master version
        run: |
          ls
          echo "Moving file to current directory.."
          rm -f -- ${{env.PROJECT_FILES_NAME}}
          cp ${{env.PROJECT_FILES_DIRECTORY}}/${{env.PROJECT_FILES_NAME}} .
          echo "done moving file to current directory.."
          ls
      - name: Inject secrets into docker build if coalescer-api
        if: ${{github.event.repository.name == 'coalescer-api'}}
        run: |
          pip3 install boto3
          ls
          chmod 777 retrieve_secrets.py
          python3 retrieve_secrets.py
      # from the firebase_secrets.json created, we will now inject the secrets into the environment variables
      # Copy .env file to src directory
      - name: Copy .env file to src directory
        if: ${{github.event.repository.name == 'coalescer-api'}}
        run: |
          chmod 777 .env
          cat .env
          cp .env src/.env

      - name: Image Repository name
        run: |
          echo "IMAGE_REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV

      - name: ECR Registry
        run: |
          echo DOCKER_TAG_VERSION="${{ env.AWS_ENVIRONMENT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${IMAGE_REPO_NAME}:${TAG_VERSION}" >> $GITHUB_ENV
          echo DOCKER_TAG_LATEST="${{ env.AWS_ENVIRONMENT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${IMAGE_REPO_NAME}:latest" >> $GITHUB_ENV

      - name: ECR Registry name
        run: echo ${DOCKER_TAG_VERSION} is the docker version

      - name: Build Docker images
        id: build_images
        run: |
          docker build -t $DOCKER_TAG_VERSION .
          docker tag $DOCKER_TAG_VERSION $DOCKER_TAG_LATEST

      - name: ECR Login
        id: ecr_login
        run: |
          (aws ecr describe-repositories --repository-names ${IMAGE_REPO_NAME} && echo "::set-output name=repo_created::false" ) || ( aws ecr create-repository --repository-name ${IMAGE_REPO_NAME} && echo "::set-output name=repo_created::true" )
          aws ecr get-login-password --region ${{ env.AWS_REGION }}| docker login --username AWS --password-stdin ${{ env.AWS_ENVIRONMENT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: created repo
        run: |
          echo "${{ steps.ecr_login.outputs.repo_created }} did we create repo"

      - name: Push docker image to ECR
        run: |
          docker push $DOCKER_TAG_VERSION
          docker push $DOCKER_TAG_LATEST

      - name: Deploy App runner
        if: ${{inputs.app_runner == 'true'}}
        run: |
          pip3 install boto3
          chmod 777 app_runner_deployment.py
          python3 app_runner_deployment.py
