name: Delete and re-seed environment seed data

# Controls when the workflow will run
on:

  workflow_call:
    inputs:
      branch_name:
        required: true
        type: string

    secrets:
      envPAT:
        required: true
      teams_uri:
        required: false
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  #BUCKET_NAME : "github-oidc-test-mitch"
  AWS_REGION : "us-east-1"
  PROJECT_FILES_GIT : "beer-project-properties.git"
  ORGANIZATION: "pallcorporation"
  PROJECT_FILES_NAME: "project.properties"
  PROJECT_FILES_DIRECTORY: "project_file"
  CDK_MODULE: "cdk_checkedout"
  API_GATEWAY_STACK_ID: beer-apigateway-0-iot-apigw
  API_GATEWAY_OUPUT_LOOKUP: beerapigateway0iotapigwurloutput
  POSTMAN_COLLECTION_DIRECTORY: "newman_collection"
  REPO_NAME: ${{ github.event.repository.name }}
  ADMIN_USERS_POLICY_SEED: beer-ul-admin-users
  IAM_SERVICE_REPOSITORY: beer-be-iam-service
  COGNITO_USER_POOL_STACK_ID: beer-cognito-0-user-pool
  COGNITO_USER_POOL_ID_OUTPUT: beercognito0userpoolidoutput
  API_GATEWAY_STACKID_OUT: beer-apigateway-0-iot-apigw
  API_GATEWAY_URL_OUT: beerapigateway0iotapigwurloutput
  COGNITO_CLIENT_ID_OUTPUT: beercognito0userpoolclientidoutput
  

permissions:
      id-token: write
      contents: read    # This is required for actions/checkout@v1
      packages: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  
  AWS-CDK-Deployment:
    if: github.repository != 'pallcorporation/digital-iot-devops-store'
    runs-on: ubuntu-latest
    steps:
        # Get current time stamp to use as reference elsewhere
        - name: Get current date
          id: date
          run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"
        
        # Get branch name to use for look up
        - name: Environment
          run: |
            echo "BRANCH_NAME=${{inputs.branch_name}}" >> $GITHUB_ENV
        
        - name: Echo branch
          run: echo "${BRANCH_NAME} is the branch name to use in lookup"
        
        # Clone repositories prior to work
        - name: Git clone the repository
          uses: actions/checkout@v2
        
          
        - name: Make project files directory
          run: mkdir ${{env.PROJECT_FILES_DIRECTORY}}
        
        - name: Make cdk directory
          run: mkdir ${{env.CDK_MODULE}}
        
        - name: Project files clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/beer-project-properties
            ref: main
            path: ${{env.PROJECT_FILES_DIRECTORY}}
        
        - name: CDK Modules clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/digital-iot-devops-cdk-modules
            ref: main
            path: ${{env.CDK_MODULE}}
        
        - name: Beer IAC Pre repo clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/beer-be-iac-common-pre
            ref: main
            path: beer-be-iac-common-pre
        
        - name: Postman repo clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/beer-ul-postman-env
            ref: main
            path: ${{env.POSTMAN_COLLECTION_DIRECTORY}}

        - name: Admin users repo clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/beer-ul-admin-users
            ref: main
            path: ${{env.ADMIN_USERS_POLICY_SEED}}
        # Read of project files and set to variables
        - name: Get project constants from project.properties repo - Branch name, deployment role, skip cdk, destroy stack
          id: project_constants
          run: |
            account_id="`grep aws_${BRANCH_NAME}_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=env_id::${account_id}"
            
            oidc_role_name="`grep aws_${BRANCH_NAME}_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=oidc_role::${oidc_role_name}"

            cdk_deploy_role_arn="`grep aws_${BRANCH_NAME}_cdk_deployment_role ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=cdk_deploy::${cdk_deploy_role_arn}"
            
            aws_bucket="`grep aws_frontend_bucket ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=aws_bucket_name::${aws_bucket}"
            echo $aws_bucket

            cloud_front_id="`grep aws_${BRANCH_NAME}_cloudfront_id ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=aws_cloud_front_id::${cloud_front_id}"
          working-directory: ${{env.PROJECT_FILES_DIRECTORY}}
        # Role that will be used for OIDC. This is the role this session will assume when connecting to AWS         
        - name: Arn to use
          id: aws_assume_role
          run: |
            echo "::set-output name=role_arn1::arn:aws:iam::${{ steps.project_constants.outputs.env_id }}:role/${{ steps.project_constants.outputs.oidc_role}}"
      
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{steps.aws_assume_role.outputs.role_arn1}}
            role-session-name: ${{ github.event.repository.name }}-${{ steps.date.outputs.date }}
            aws-region: ${{ env.AWS_REGION }}
        
        - name: API Gateway output
          run: |
            echo "API_GATEWAY_STACKID_OUT=beerapigateway0iotapigwurloutput" >> $GITHUB_ENV
            echo "API_GATEWAY_URL=$(aws cloudformation --region ${{ env.AWS_REGION }} describe-stacks --stack-name ${{env.API_GATEWAY_STACKID_OUT}} --query 'Stacks[0].Outputs[?OutputKey==`${{env.API_GATEWAY_URL_OUT}}`].OutputValue' --output text)" >> $GITHUB_ENV

        
        - name: Make ${{env.IAM_SERVICE_REPOSITORY}}
          run: |
            mkdir ${{env.IAM_SERVICE_REPOSITORY}}
        
        - name: beer-be-iam-service repo clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/beer-be-iam-service
            ref: main
            path: ${{env.IAM_SERVICE_REPOSITORY}}
        
        - name: Cognito User Pool query
          id: get_user_pool_client_id
          run: |
            echo "COGNITO_CLIENT_ID=$(aws cloudformation --region ${{ env.AWS_REGION }} describe-stacks --stack-name ${{env.COGNITO_USER_POOL_STACK_ID}} --query 'Stacks[0].Outputs[?OutputKey==`${{env.COGNITO_CLIENT_ID_OUTPUT}}`].OutputValue' --output text)" >> $GITHUB_ENV
        
        - name: Postman required variables
          run: |
            echo "CREATE_POSTMAN_USER=True" >> $GITHUB_ENV
        
        - name: Cognito User Pool query
          id: get_user_pool_id
          run: |
            echo "COGNITO_USERPOOL_ID=$(aws cloudformation --region ${{ env.AWS_REGION }} describe-stacks --stack-name ${{env.COGNITO_USER_POOL_STACK_ID}} --query 'Stacks[0].Outputs[?OutputKey==`${{env.COGNITO_USER_POOL_ID_OUTPUT}}`].OutputValue' --output text)" >> $GITHUB_ENV
        
        - name: Run python script to seed policy to admins
          run: |
            ls
            rm -rf ${{env.ADMIN_USERS_POLICY_SEED}}/super-user-policy.json
            cp ${{env.IAM_SERVICE_REPOSITORY}}/seeding-data/super-user-policy.jsonc ${{env.ADMIN_USERS_POLICY_SEED}}/super-user-policy.json
            pip3 install boto3
            pip3 install pytz
            python3 ${{env.ADMIN_USERS_POLICY_SEED}}/admins.py
        
        - name: Run python script to Confirm or create envrionment admin user
          run: |
            python3 ${{env.ADMIN_USERS_POLICY_SEED}}/create_environment_user.py

        - name: Read output file from seed
          run: |
            cat deploy_data.properties

            COGNITO_USERNAME="`grep COGNITO_USERNAME deploy_data.properties|cut -d'=' -f2`"
            echo "POSTMAN_USERNAME=${COGNITO_USERNAME}" >> $GITHUB_ENV

            COGNITO_PASSWORD="`grep COGNITO_PASSWORD deploy_data.properties|cut -d'=' -f2`"
            echo "POSTMAN_PASSWORD=${COGNITO_PASSWORD}" >> $GITHUB_ENV

            COGNITO_SECRET="`grep COGNITO_SECRET deploy_data.properties|cut -d'=' -f2`"
            echo "COGNITO_CLIENT_SECRET=${COGNITO_SECRET}" >> $GITHUB_ENV
            
        # Grant permissions to all files in directory
        - name: Grant permissions to all files
          run: chmod -R 755 ./

        - name: Run python delete seed script
          run: |
            python3 batch_delete_seeds.py
            python3 app.py