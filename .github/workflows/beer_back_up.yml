name: Back up repository

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - '*'

  workflow_call:
    inputs:
      branch_name:
        type: string

    secrets:
      envPAT:
        required: true
      teams_uri:
        required: false

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  #BUCKET_NAME : "github-oidc-test-mitch"
  AWS_REGION : "us-east-1"
  PROJECT_FILES_GIT : "beer-project-properties.git"
  ORGANIZATION: "pallcorporation"
  PROJECT_FILES_NAME: "project.properties"
  PROJECT_FILES_DIRECTORY: "project_file"
  IMAGE_REGISTRY: "ghcr.io"
  IMAGE_REGISTRY_USERNAME: ${{github.actor}}
  IMAGE_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NX_ARTIFACT_STORE: beer-ul-nx-workspace
  GH_USERNAME: ${{github.actor}}

permissions:
      id-token: write
      contents: read    # This is required for actions/checkout@v1
      packages: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:  
  main-setup:
    if: github.repository != 'pallcorporation/.github'
    runs-on: ubuntu-latest
    
    steps:
        - name: Get current date
          id: date
          run: echo "date=$(date +'%Y%m%dT%H%M%S')" >> $GITHUB_ENV
        
        - name: Personal Access Token
          run: |
            echo "GITHUB_TOKEN=${{ secrets.envPAT }}" >> $GITHUB_ENV

        - name: Git clone the repository
          uses: actions/checkout@v3

        - name: Make project files directory
          run: mkdir ${{env.PROJECT_FILES_DIRECTORY}}

        - name: Project files clone
          uses: actions/checkout@v3
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/beer-project-properties
            ref: main
            path: ${{env.PROJECT_FILES_DIRECTORY}}
        
        # Grant permissions to all files in directory
        - name: Grant permissions to all files
          run: chmod -R 755 ./  
        
        # Read of project files and set to variables
        - name: Get project constants from project.properties
          id: project_constants
          run: |
            account_id="`grep aws_tools_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "tools_account_id=${account_id}" >> $GITHUB_ENV
            
            oidc_role="`grep aws_tools_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "oidc_role_name=${oidc_role}" >> $GITHUB_ENV
            

          working-directory: ${{env.PROJECT_FILES_DIRECTORY}}

        # Role that will be used for OIDC. This is the role this session will assume when connecting to AWS         
        - name: Arn to use
          id: aws_assume_role
          run: |
            echo "AWS_ASSUME_ROLE=arn:aws:iam::${{ env.tools_account_id }}:role/${{ env.oidc_role_name}}" >> $GITHUB_ENV

        - name: Image Repository name
          run: |
            echo "REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{env.AWS_ASSUME_ROLE}}
            role-session-name: ${{ github.event.repository.name }}-${{ env.date }}
            aws-region: ${{ env.AWS_REGION }}
        
        - name: Create repo if doesn't exist in AWS Tools account
          run: |
            aws codecommit get-repository --repository-name ${{env.REPO_NAME}} || aws codecommit create-repository --repository-name ${{env.REPO_NAME}}
            
        - name: Make repo directory
          run: mkdir ${{env.REPO_NAME}}_stage

        - name: Set git username and email
          run: |
            git config --global user.email "${{ env.GH_USERNAME}}@users.noreply.github.com"
            git config --global user.name "${{ env.GH_USERNAME}}"
            git config --global credential.helper '!aws codecommit credential-helper $@'
            git config --global credential.UseHttpPath true

        - name: Clone and sync
          run: |
            git clone --mirror https://${{secrets.envPAT}}@github.com/pallcorporation/${{env.REPO_NAME}}.git ${{env.REPO_NAME}}_stage
            cd ${{env.REPO_NAME}}_stage
            git push https://git-codecommit.${{env.AWS_REGION}}.amazonaws.com/v1/repos/${{env.REPO_NAME}} -f --all
        
        - name: Microsoft Teams Notification
          if: failure()
          uses: jdcargile/ms-teams-notification@v1.3
          with:
            github-token: ${{ secrets.envPAT }} # this will use the runner's token.
            ms-teams-webhook-uri: ${{ secrets.teams_uri }}
            notification-summary: "Faild to backup ${{env.REPO_NAME}} &#x274C; : Please view workflow."
            notification-color: FF0000
            timezone: America/New_York
