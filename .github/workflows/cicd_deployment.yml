# This is a basic workflow to help you get started with Actions
name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  #push:
  #  branches:
  #    - dev
  #    - integration
  workflow_call:
    inputs:
      branch_name:
        required: true
        type: string
      
      deploy_to_s3:
        required: true
        type: boolean

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  #BUCKET_NAME : "github-oidc-test-mitch"
  AWS_REGION : "us-east-1"

permissions:
      id-token: write
      contents: read    # This is required for actions/checkout@v1
      packages: write
      contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:  
  CommitAutomation:
    runs-on: ubuntu-latest
      
    #needs: FindAWSAccount
    steps:
        
        - name: Git clone the repository
          uses: actions/checkout@v1

        - name: Branch name
          id: get_branch_name
          run: |
            echo "##[set-output name=branch_name;]$(echo ${{inputs.branch_name}})"
            echo ${{ steps.get_branch_name.outputs.branch}}
            ls
        
        - name: Deploy to S3
          id: get_deployment_type
          run: |
            echo "##[set-output name=is_s3_deployment;]$(echo ${{inputs.deploy_to_s3}})"
            echo ${{ steps.get_deployment_type.outputs.is_s3_deployment}}
            
        - name: Grant permissions to all files
          run: chmod -R 755 ./

        - name: Read if to skip cdk deployment based on commit message
          id: skip_cdk
          if: "contains(github.event.head_commit.message, '+cdk-skip')"
          run: |
            echo "We will skip cdk execution"
            echo "::set-output name=bypass_cdk::true"
        
        - name: Read if to skip cdk deployment based on commit message
          id: skip_npm
          if: "contains(github.event.head_commit.message, '+npm-skip')"
          run: |
            echo "We will node installation"
            echo "::set-output name=bypass_npm::true"
            
        - name: Get project constants - Branch name, deployment role, skip cdk, destroy stack
          id: project_constants
          run: |
            account_id="`grep aws_${{ steps.get_branch_name.outputs.branch_name }}_account project.properties|cut -d'=' -f2`"
            echo "::set-output name=env_id::${account_id}"
            
            oidc_role_name="`grep aws_${{ steps.get_branch_name.outputs.branch_name }}_oidc_role_name project.properties|cut -d'=' -f2`"
            echo "::set-output name=oidc_role::${oidc_role_name}"

            cdk_deploy_role_arn="`grep aws_${{ steps.get_branch_name.outputs.branch_name }}_cdk_deployment_role project.properties|cut -d'=' -f2`"
            echo "::set-output name=cdk_deploy::${cdk_deploy_role_arn}"

            destroy_stack_var="`grep cdk_destroy_stack project.properties|cut -d'=' -f2`"
            echo "::set-output name=cdk_destroy_stack::${destroy_stack_var}"
            
            aws_bucket="`grep aws_frontend_bucket project.properties|cut -d'=' -f2`"
            echo "::set-output name=aws_bucket_name::${aws_bucket}"
                        
        - name: Arn to use
          id: aws_assume_role
          run: |
            echo "::set-output name=role_arn1::arn:aws:iam::${{ steps.project_constants.outputs.env_id }}:role/${{ steps.project_constants.outputs.oidc_role}}"
          
        - name: Check if CDK exists
          id: check_cdk
          run: |
            DIR="cdk/"
            ls
            if [ -d "$DIR" ]; then
              # Take action if $DIR exists. #
              echo "Installing config files in ${DIR}..."
              echo "::set-output name=cdk_found::true"
            fi

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{steps.aws_assume_role.outputs.role_arn1}}
            role-session-name: samplerolesession
            aws-region: ${{ env.AWS_REGION }}

        - name: Run CDK if found to exist
          if: ${{steps.check_cdk.outputs.cdk_found == 'true' && steps.skip_cdk.outputs.bypass_cdk !='true'}}
          run: | 
            echo "Value of cdk found is ${{steps.check_cdk.outputs.cdk_found}}"
            chmod -R 755 cdk
            cdk/cdk_installation.sh

        - name: Running cdk synth && deploy
          if: ${{steps.check_cdk.outputs.cdk_found == 'true' && steps.project_constants.outputs.cdk_destroy_stack != 'true' && steps.skip_cdk.outputs.bypass_cdk !='true' }}
          run: |
            echo "We will run cdk deploy --all --require-approval never --role-arn ${{ steps.project_constants.outputs.cdk_deploy }}"
            cdk deploy \
            --all \
            --require-approval never \
            --role-arn arn:aws:iam::${{ steps.project_constants.outputs.env_id }}:role/${{ steps.project_constants.outputs.cdk_deploy }} 
          working-directory: cdk
        
        - name: Deployment bucket
          id: deployment_bucket
          run: |
            echo "${{steps.project_constants.outputs.aws_bucket_name}} is the name of the bucket"
        
        - name: Destroying stack if required
          if: ${{steps.check_cdk.outputs.cdk_found == 'true' && steps.project_constants.outputs.cdk_destroy_stack == 'true' && steps.skip_cdk.outputs.bypass_cdk !='true'}}
          run: |
            
            yes | cdk destroy --all --require-approval never --role-arn ${{ steps.project_constants.outputs.cdk_deploy }}
          working-directory: cdk
        
        - name: Setup node.js environment
          uses: actions/setup-node@v2.1.2


        - name: Npm install & npm build
          if: ${{steps.skip_npm.outputs.bypass_npm !='true' && steps.get_deployment_type.outputs.is_s3_deployment == 'true'}}
          run: |
            npm install
            npm run build

        - name: Deployment information
          run:
            echo If "deploy to s3" flag is set to true, then the artifact will be built and deployed to S3 bucket, else an image will be built and pushed to registry.
        
     
        # Upload a file to AWS s3
        - name:  Deploy to S3 - Copy Build folder to s3
          if: ${{ steps.get_deployment_type.outputs.is_s3_deployment == 'true'}}
        #  run: aws s3 cp ./index.html s3://${{ env.BUCKET_NAME }}-${{steps.get_branch_name.outputs.branch_name}}/
          run: |
            aws s3 sync build/ s3://${{steps.project_constants.outputs.aws_bucket_name}}-${{ steps.get_branch_name.outputs.branch_name }} 
        
        # Upload a file to AWS s3
        - name:  Build image and deploy to registry
          id: docker_image_info
          if: ${{ steps.get_deployment_type.outputs.is_s3_deployment == 'false'}}
        #  run: aws s3 cp ./index.html s3://${{ env.BUCKET_NAME }}-${{steps.get_branch_name.outputs.branch_name}}/
          run: |
            echo "Deploying image"
            IMAGE_NAME=${{ github.event.repository.name }}:1.0.0
              
            IMAGE_ID=ghcr.io/${{github.repository_owner}}/${{ github.event.repository.name }}/$IMAGE_NAME
            docker build . -t $IMAGE_ID    
            echo "::set-output name=image_id::$IMAGE_ID"
            echo "::set-output name=image_name::$IMAGE_NAME"
      #      docker push $IMAGE_ID            
  
        - name: Login to docker
          if: ${{ steps.get_deployment_type.outputs.is_s3_deployment == 'false'}}
          uses: docker/login-action@v1
          with:
            registry: ghcr.io
            username: ${{github.actor}}
            password: ${{ secrets.GITHUB_TOKEN }}
            
        
        - name: Push docker image test
          if: ${{ steps.get_deployment_type.outputs.is_s3_deployment == 'false'}}
          run: docker push ${{ steps.docker_image_info.outputs.image_id}}
     #      docker push ghcr.io/pallcorporation/${{ steps.docker_image_info.outputs.image_name}}


            

    outputs:
      #env_name: ${{ steps.branch_check.outputs.env_id }}tt
      #role_arn: ${{ steps.aws_assume_role.outputs.role_arn1}}
      cdk_check: ${{ steps.check_cdk.outputs.cdk_found}}
      env_name: ${{ steps.project_constants.outputs.env_id }}
      oidc_role: ${{ steps.project_constants.outputs.oidc_role}}
      skip_cdk: ${{ steps.skip_cdk.outputs.bypass_cdk}}
      cdk_deploy_name: ${{ steps.project_constants.outputs.cdk_deploy}}
      cdk_destroy_stack_bool: ${{ steps.project_constants.outputs.cdk_destroy_stack}}
      role_arn: ${{ steps.aws_assume_role.outputs.role_arn1}}
      branch_name: ${{ steps.get_branch_name.outputs.branch_name}}
      aws_upload_bucket: ${{steps.project_constants.outputs.aws_bucket_name}}