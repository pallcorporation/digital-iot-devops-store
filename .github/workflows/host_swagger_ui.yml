name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  #push:
  #  branches:
  #    - dev
  #    - integration
  workflow_call:
    inputs:
      branch_name:
        required: true
        type: string
      
      destroy_stack:
        type: boolean
        default: false

      deployment_type:
        type: string
      config_files_directory:
        required: true
        type: string
    secrets:
      envPAT:
        required: true
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  #BUCKET_NAME : "github-oidc-test-mitch"
  AWS_REGION : "us-east-1"
  PROJECT_FILES_GIT : "beer-project-properties.git"
  ORGANIZATION: "pallcorporation"
  PROJECT_FILES_NAME: "project.properties"
  PROJECT_FILES_DIRECTORY: "project_file"
  IMAGE_REGISTRY: "ghcr.io"
  IMAGE_REGISTRY_USERNAME: ${{github.actor}}
  IMAGE_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CDK_MODULE: "cdk_checkedout"
  

permissions:
      id-token: write
      contents: read    # This is required for actions/checkout@v1
      packages: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:  
  AWS-CDK-Deployment:
    runs-on: ubuntu-latest
      
    steps:
        # Get current time stamp to use as reference elsewhere
        - name: Get current date
          id: date
          run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"
        
        # Node installation (if required)
        - name: Setup node.js environment
          uses: actions/setup-node@v2.1.2
        
        # Get branch name to use for look up
        - name: Branch name
          id: get_branch_name
          run: |
            if [[ ${{inputs.branch_name}} == 'main' ]]
            then
              echo "BRANCH_NAME=production" >> $GITHUB_ENV
            else
              echo "BRANCH_NAME=$(echo ${{inputs.branch_name}})" >> $GITHUB_ENV
            fi

            echo "$BRANCH_NAME is the name"
        
        # Clone repositories prior to work
        - name: Git clone the repository
          uses: actions/checkout@v1
        
        - name: Make project files directory
          run: mkdir ${{env.PROJECT_FILES_DIRECTORY}}
        
        - name: Make cdk directory
          run: mkdir ${{env.CDK_MODULE}}
        
        - name: Swagger install
          run: |
            npm install css-loader json-loader style-loader yaml-loader webpack webpack-cli html-webpack-plugin -D
            npm install swagger-ui
        
        - name: Project files clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/beer-project-properties
            ref: main
            path: ${{env.PROJECT_FILES_DIRECTORY}}
        
        - name: CDK Modules clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/digital-iot-devops-cdk-modules
            ref: main
            path: ${{env.CDK_MODULE}}
        
        # Grant permissions to all files in directory
        - name: Grant permissions to all files
          run: chmod -R 755 ./
        
        #- name: Copy files to swagger_src
        #  run: |
        #    sudo cp -f swagger.yaml /swagger_src/swagger.yaml
        
        - name: Build swagger
          run: |
            npm run build

        # Read commit message and determine if to skip cdk work
        - name: Read if to skip cdk deployment based on commit message
          id: skip_cdk
          if: "contains(github.event.head_commit.message, '+cdk-skip')"
          run: |
            echo "We will skip cdk execution"
            echo "::set-output name=bypass_cdk::true"
        
        # Read of project files and set to variables
        - name: Get project constants from project.properties repo - Branch name, deployment role, skip cdk, destroy stack
          id: project_constants
          run: |
            account_id="`grep aws_${BRANCH_NAME}_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=env_id::${account_id}"
            
            oidc_role_name="`grep aws_${BRANCH_NAME}_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=oidc_role::${oidc_role_name}"

            cdk_deploy_role_arn="`grep aws_${BRANCH_NAME}_cdk_deployment_role ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=cdk_deploy::${cdk_deploy_role_arn}"
            
            aws_bucket="`grep aws_frontend_bucket ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=aws_bucket_name::${aws_bucket}"
            echo $aws_bucket

            cloud_front_id="`grep aws_${BRANCH_NAME}_cloudfront_id ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=aws_cloud_front_id::${cloud_front_id}"
          working-directory: ${{env.PROJECT_FILES_DIRECTORY}}
        
        - name: Copy cdk config files
          run: |
            rm -r ${{env.CDK_MODULE}}/config_files/*
            cp -a ${{inputs.config_files_directory}}/. ${{env.CDK_MODULE}}/config_files/
            cp -a ${{env.PROJECT_FILES_DIRECTORY}}/. ${{env.CDK_MODULE}}/
        
        
        # Role that will be used for OIDC. This is the role this session will assume when connecting to AWS         
        - name: Arn to use
          id: aws_assume_role
          run: |
            echo "::set-output name=role_arn1::arn:aws:iam::${{ steps.project_constants.outputs.env_id }}:role/${{ steps.project_constants.outputs.oidc_role}}"
      
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{steps.aws_assume_role.outputs.role_arn1}}
            role-session-name: ${{ github.event.repository.name }}-${{ steps.date.outputs.date }}
            aws-region: ${{ env.AWS_REGION }}
        
        - name: Install yaml
          run: |
            pip install pyyaml
            sudo npm install -g aws-cdk

        # Upload a file to AWS s3
        - name:  Deploy to S3 - Copy Build folder to s3
        #  if: ${{ steps.skip_everything.outputs.skip_everything1 != 'true' && steps.skip_npm.outputs.bypass_npm !='true' && steps.get_deployment_type.outputs.deployment_type == 'web' && steps.get_cdk_destroy_stack.outputs.cdk_destroy_stack != 'true' }}
          run: |
            aws s3 sync ./dist s3://beer-api-swagger-dev
        #    aws cloudfront create-invalidation --distribution-id E11LJKZLIMW93N --paths '/*'
        # Build & deploy docker image
        #- name: Invalidate cloudfront cache
        #  if: ${{ steps.skip_everything.outputs.skip_everything1 != 'true' && steps.get_deployment_type.outputs.deployment_type == 'web' && steps.get_cdk_destroy_stack.outputs.cdk_destroy_stack != 'true' }}
        #  run: |
        #    aws cloudfront create-invalidation --distribution-id E11LJKZLIMW93N --paths '/*'
