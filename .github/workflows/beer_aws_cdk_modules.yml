name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  #push:
  #  branches:
  #    - dev
  #    - integration
  workflow_call:
    inputs:
      branch_name:
        required: true
        type: string
      
      destroy_stack:
        type: boolean
        default: false

      deployment_type:
        type: string
      config_files_directory:
        required: true
        type: string

      repo_name:
        type: string

      repo_version:
        type: string
      
    secrets:
      envPAT:
        required: true
      teams_uri:
        required: false
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  #BUCKET_NAME : "github-oidc-test-mitch"
  AWS_REGION : "us-east-1"
  PROJECT_FILES_GIT : "beer-project-properties.git"
  ORGANIZATION: "pallcorporation"
  PROJECT_FILES_NAME: "project.properties"
  PROJECT_FILES_DIRECTORY: "project_file"
  IMAGE_REGISTRY: "ghcr.io"
  IMAGE_REGISTRY_USERNAME: ${{github.actor}}
  IMAGE_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CDK_MODULE: "cdk_checkedout"
  API_GATEWAY_STACK_ID: beer-apigateway-0-iot-apigw
  API_GATEWAY_OUPUT_LOOKUP: beerapigateway0iotapigwurloutput
  

permissions:
      id-token: write
      contents: read    # This is required for actions/checkout@v1
      packages: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  
  AWS-CDK-Deployment:
    if: github.repository != 'pallcorporation/digital-iot-devops-store'
    runs-on: ubuntu-latest
    steps:
        # Get current time stamp to use as reference elsewhere
        - name: Get current date
          id: date
          run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"
        
        - name: Uninstall AWS CLI
          run: |
            
            AWS_INSTALL=$(which aws)
            sudo rm ${AWS_INSTALL}
            sudo rm ${AWS_INSTALL}_completer
            sudo rm -rf /usr/local/aws-cli
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.5.7.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

        
        # Get branch name to use for look up
        - name: Branch if Dev
          if: contains( github.ref, 'dev' )
          run: |
            echo "BRANCH_NAME=dev" >> $GITHUB_ENV
        
        - name: Branch if Integration
          if: contains( github.ref, 'integration' )
          run: |
            echo "BRANCH_NAME=integration" >> $GITHUB_ENV

        - name: Branch if users
          if: contains( github.ref, 'users' )
          run: |
            echo "BRANCH_NAME=dev" >> $GITHUB_ENV
        
        - name: Branch if Main
          if: contains( github.ref, 'main' )
          run: |
            echo "BRANCH_NAME=production" >> $GITHUB_ENV
        
        - name: Branch if BETA
          if: contains( github.ref, 'beta' )
          run: |
            echo "BRANCH_NAME=beta" >> $GITHUB_ENV
            
        
        - name: Echo branch
          run: echo "${BRANCH_NAME} is the branch name to use in lookup"
        
        # Clone repositories prior to work
        - name: Git clone the repository
          uses: actions/checkout@v2
        
        - name: Make repo directory
          if: ${{inputs.repo_name}}
          run: mkdir ${{ inputs.repo_name }}_stage
          
        - name: Check out ${{ inputs.repo_name }}
          if: ${{inputs.repo_name}}
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/${{ inputs.repo_name }}
            ref: ${{inputs.repo_version}}
            path: ${{ inputs.repo_name }}_stage
        
        - name: Make project files directory
          run: mkdir ${{env.PROJECT_FILES_DIRECTORY}}
        
        - name: Make cdk directory
          run: mkdir ${{env.CDK_MODULE}}
        
        - name: Move files (if from application deployment)
          if: ${{inputs.repo_name}}
          run: mv ${{ inputs.repo_name }}_stage/* .
        
        - name: Find-and-replace strings in tag version from application deployment
          if: ${{inputs.repo_name}}
          uses: mad9000/actions-find-and-replace-string@2
          id: findandreplace_version1
          with:
            source: ${{inputs.repo_version}} # this translates to ref/heads/main on the main branch, but can be any arbitrary string 
            find: 'v'        # we want to remove ref/heads/ from source 
            replace: ''
        
        - name: Set environment variables for CDK stack
          if: ${{inputs.repo_name}}
          run: |
            echo "DOCKER_IMAGE_TAG=${{steps.findandreplace_version1.outputs.value}}" >> $GITHUB_ENV
            echo "DOCKER_IMAGE_REPOSITORY=${{inputs.repo_name}}" >> $GITHUB_ENV
        
        - name: Project files clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/beer-project-properties
            ref: main
            path: ${{env.PROJECT_FILES_DIRECTORY}}
        
        - name: CDK Modules clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/digital-iot-devops-cdk-modules
            ref: main
            path: ${{env.CDK_MODULE}}

        - name: Replace github username
          if: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/dev' && github.ref != 'refs/heads/integration' && github.ref != 'refs/heads/beta' }}
          run: |
            echo "def user():" > "github_user.py"
            echo "  user=""\""${{github.actor}}"\"" >> "github_user.py"
            echo "  return user" >> "github_user.py"

            rm ${{env.CDK_MODULE}}/src/github_user.py
            cp github_user.py ${{env.CDK_MODULE}}/src/

            
        # Grant permissions to all files in directory
        - name: Grant permissions to all files
          run: chmod -R 755 ./

        # Read commit message and determine if to skip cdk work
        - name: Read if to skip cdk deployment based on commit message
          id: skip_cdk
          if: "contains(github.event.head_commit.message, '+cdk-skip')"
          run: |
            echo "We will skip cdk execution"
            echo "::set-output name=bypass_cdk::true"
        
        # Read of project files and set to variables
        - name: Get project constants from project.properties repo - Branch name, deployment role, skip cdk, destroy stack
          id: project_constants
          run: |
            account_id="`grep aws_${BRANCH_NAME}_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=env_id::${account_id}"
            
            oidc_role_name="`grep aws_${BRANCH_NAME}_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=oidc_role::${oidc_role_name}"

            cdk_deploy_role_arn="`grep aws_${BRANCH_NAME}_cdk_deployment_role ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=cdk_deploy::${cdk_deploy_role_arn}"
            
            aws_bucket="`grep aws_frontend_bucket ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=aws_bucket_name::${aws_bucket}"
            echo $aws_bucket

            cloud_front_id="`grep aws_${BRANCH_NAME}_cloudfront_id ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=aws_cloud_front_id::${cloud_front_id}"
          working-directory: ${{env.PROJECT_FILES_DIRECTORY}}
        
        # Read if to destroy stack from input
        - name: Destroy CDK Stack
          id: get_cdk_destroy_stack
          run: |
            echo "##[set-output name=cdk_destroy_stack;]$(echo ${{inputs.destroy_stack}})"
        
        - name: Copy cdk config files
          run: |
            rm -r ${{env.CDK_MODULE}}/config_files/*
            cp -a ${{inputs.config_files_directory}}/. ${{env.CDK_MODULE}}/config_files/
            cp -a ${{env.PROJECT_FILES_DIRECTORY}}/. ${{env.CDK_MODULE}}/
        
        
        
        # Role that will be used for OIDC. This is the role this session will assume when connecting to AWS         
        - name: Arn to use
          id: aws_assume_role
          run: |
            echo "::set-output name=role_arn1::arn:aws:iam::${{ steps.project_constants.outputs.env_id }}:role/${{ steps.project_constants.outputs.oidc_role}}"
      
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{steps.aws_assume_role.outputs.role_arn1}}
            role-session-name: ${{ github.event.repository.name }}-${{ steps.date.outputs.date }}
            aws-region: ${{ env.AWS_REGION }}
        - name: Grant permissions to all files
          run: | 
            chmod -R 755 ${{env.CDK_MODULE}}

        - name: Install CDK
          if: ${{ steps.skip_cdk.outputs.bypass_cdk !='true'}}
          run: | 
            sudo npm -g install aws-cdk@2.22.0
            cat ${{env.CDK_MODULE}}/requirements.txt
            pip3 install -r  ${{env.CDK_MODULE}}/requirements.txt

        - name: Install yaml
          run: |
            pip install pyyaml

        - name: Test cdk synth works
          if: ${{ steps.skip_cdk.outputs.bypass_cdk !='true'}}
          run: cdk synth
          working-directory: ${{env.CDK_MODULE}}
        
        # Destroy AWS IAC cdk stack if advised
        - name: Destroying stack if required
          if: ${{steps.get_cdk_destroy_stack.outputs.cdk_destroy_stack == 'true' && steps.skip_cdk.outputs.bypass_cdk !='true'}}
          run: |
            yes | cdk destroy --all --require-approval never --role-arn arn:aws:iam::${{ steps.project_constants.outputs.env_id }}:role/${{ steps.project_constants.outputs.cdk_deploy }} 
          working-directory: ${{env.CDK_MODULE}}

        
        
        # *****************PROJECT SPECIFIC ELEMENTS*****************

        # AWS IAC cdk deployment
        # Role to deploy as in defined in project.properties file
        - name: Running cdk deploy
          if: ${{steps.get_cdk_destroy_stack.outputs.cdk_destroy_stack != 'true' && steps.skip_cdk.outputs.bypass_cdk !='true'}}
          run: |
            echo "We will run cdk deploy --all --require-approval never --role-arn ${{ steps.project_constants.outputs.cdk_deploy }}"
            cdk deploy \
            --all \
            --require-approval never \
            --role-arn arn:aws:iam::${{ steps.project_constants.outputs.env_id }}:role/${{ steps.project_constants.outputs.cdk_deploy }} 
          working-directory: ${{env.CDK_MODULE}}
        
        - name: Cleanup API Gateway routes
          if: ${{steps.get_cdk_destroy_stack.outputs.cdk_destroy_stack != 'true' && steps.skip_cdk.outputs.bypass_cdk !='true' && github.ref == 'refs/heads/dev' && github.ref != 'refs/heads/dev'}}
          run: |
            python3 src/aws_modules/APIGatewayv2/apigateway_cleanup.py
             
          working-directory: ${{env.CDK_MODULE}}
        
        - name: API Gateway url
          if: github.repository != 'pallcorporation/beer-application-deployment'
          id: get_api_url
          run: |
            API_DOMAIN_URL=$(aws cloudformation --region ${{ env.AWS_REGION }} describe-stacks --stack-name ${{env.API_GATEWAY_STACK_ID}} --query 'Stacks[0].Outputs[?OutputKey==`${{env.API_GATEWAY_OUPUT_LOOKUP}}`].OutputValue' --output text)
            echo "::set-output name=API_DOMAIN_URL_OUTPUT::$API_DOMAIN_URL" 
        - name: API Gateway URL echo
          if: github.repository != 'pallcorporation/beer-application-deployment'
          run: |
            echo "${{ steps.get_api_url.outputs.API_DOMAIN_URL_OUTPUT}} is the url"
            echo "API_GATEWAY_URL=${{ steps.domain_url.outputs.DOMAIN_URL_OUTPUT}}" >> $GITHUB_ENV