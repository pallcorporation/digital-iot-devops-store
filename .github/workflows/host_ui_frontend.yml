name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  #push:
  #  branches:
  #    - dev
  #    - integration
  workflow_call:
    inputs:
      branch_name:
        required: true
        type: string
      
      destroy_stack:
        type: boolean
        default: false

      deployment_type:
        type: string
      
      repo_name:
        type: string
      repo_version:
        type: string

      config_files_directory:
        required: true
        type: string

      build_project_type:
        required: true
        type: string
        

      hosting_bucket:
        required: true
        type: string
        
      
      in_stack_id:
        required: true
        type: string
        
      
      in_cloudfront_url_output_to_query:
        required: true
        type: string
        
      
      in_cloudfront_output:
        required: true
        type: string
        

    secrets:
      envPAT:
        required: true
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  #BUCKET_NAME : "github-oidc-test-mitch"
  AWS_REGION : "us-east-1"
  PROJECT_FILES_GIT : "beer-project-properties.git"
  ORGANIZATION: "pallcorporation"
  PROJECT_FILES_NAME: "project.properties"
  PROJECT_FILES_DIRECTORY: "project_file"
  CDK_MODULE: "cdk_checkedout"
  DEVOPS_STORE: "devops_store"

  

permissions:
      id-token: write
      contents: read    # This is required for actions/checkout@v1
      packages: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:  
  AWS-CDK-Deployment:
    if: (github.repository != 'pallcorporation/digital-iot-devops-store' && github.repository != 'pallcorporation/beer-application-deployment')
    runs-on: ubuntu-latest
      
    steps:
        # Get current time stamp to use as reference elsewhere
        - name: Get current date
          id: date
          run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"
        
        - name: Check if input is null for repo name
          if: ${{inputs.repo_name}}
          id: repo_name_passed
          run: |
            if [ ${{inputs.repo_name}} != "" ]; then
              echo ::set-output name=reponamepassed::true
            else
              echo ::set-output name=reponamepassed::false
            fi
        
        - name: Checkout
          uses: actions/checkout@v2
        
        #- name: Git clone the repository
        #  uses: actions/checkout@v2

        - name: Find-and-replace strings
          uses: mad9000/actions-find-and-replace-string@2
          id: findandreplace_user
          with:
            source: ${{ github.actor }} # this translates to ref/heads/main on the main branch, but can be any arbitrary string 
            find: '-'        # we want to remove ref/heads/ from source 
            replace: ''
        
        - name: Get the above output
          run: |
            echo "The replaced value is ${{ steps.findandreplace_user.outputs.value }}"
            echo "GITHUB_USER=${{ steps.findandreplace_user.outputs.value }}" >> $GITHUB_ENV

        - name: Github user
          run: echo "${GITHUB_USER} <---Finally..."

         # Node installation (if required)
        - name: Setup node.js environment
          uses: actions/setup-node@v2.1.2

        - name: Branch if Dev
          if: contains( github.ref, 'dev' )
          run: |
            echo "BRANCH_NAME=dev" >> $GITHUB_ENV
        
        - name: Branch if Integration
          if: contains( github.ref, 'integration' )
          run: |
            echo "BRANCH_NAME=integration" >> $GITHUB_ENV

        - name: Branch if users
          if: contains( github.ref, 'users' )
          run: |
            echo "BRANCH_NAME=dev" >> $GITHUB_ENV
        
        - name: Branch if Main
          if: contains( github.ref, 'main' )
          run: |
            echo "BRANCH_NAME=production" >> $GITHUB_ENV
        
        - name: Branch if BETA
          if: contains( github.ref, 'beta' )
          run: |
            echo "BRANCH_NAME=beta" >> $GITHUB_ENV
            
        
        - name: Echo branch
          run: echo "${BRANCH_NAME} is the branch name to use in lookup"
          
        - name: Make repo directory
          if: ${{inputs.repo_name}}
          run: mkdir ${{ inputs.repo_name }}_stage
          
        - name: Check out ${{ inputs.repo_name }}
          if: ${{inputs.repo_name}}
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.BEER_PROJECT_PROPERTIES }}
            repository: pallcorporation/${{ inputs.repo_name }}
            ref: ${{inputs.repo_version}}
            path: ${{ inputs.repo_name }}_stage
        
        - name: Build directory swagger
          if: ${{inputs.build_project_type == 'swagger' }}
          run: |
            echo "BUILD_DIRECTORY=dist" >> $GITHUB_ENV

        - name: Build directory nx
          if: ${{inputs.build_project_type == 'nx' }}
          run: |
            echo "BUILD_DIRECTORY=dist/apps/beeriot-web" >> $GITHUB_ENV

        - name: Build directory storybook
          if: ${{inputs.build_project_type == 'storybook' }}
          run: |
            echo "BUILD_DIRECTORY=dist/storybook/ui-components" >> $GITHUB_ENV
        
        - name: Build directory echo
          run: echo $BUILD_DIRECTORY
        # Clone repositories prior to work
        
        - name: Move files (if from application deployment)
          if: ${{ steps.repo_name_passed.outputsreponamepassed }}
          run: mv ${{ inputs.repo_name }}_stage/* .
        
        - name: Make project files directory
          run: mkdir ${{env.PROJECT_FILES_DIRECTORY}}
        
        - name: Make cdk directory
          run: mkdir ${{env.CDK_MODULE}}
        
        - name: Make devops store directory
          run: mkdir ${{env.DEVOPS_STORE}}
        
        - name: Swagger install
          if: ${{inputs.build_project_type == 'swagger' }}
          run: |
            npm install swagger-ui

        - name: Swagger install dependencies
          if: ${{inputs.build_project_type == 'swagger1' }}
          run: |
            npm install css-loader json-loader style-loader yaml-loader webpack webpack-cli html-webpack-plugin -D
            
        
        - name: Project files clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/beer-project-properties
            ref: main
            path: ${{env.PROJECT_FILES_DIRECTORY}}
        
        - name: CDK Modules clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/digital-iot-devops-cdk-modules
            ref: main
            path: ${{env.CDK_MODULE}}

        - name: Node Modules clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/digital-iot-devops-store
            ref: main
            path: ${{env.DEVOPS_STORE}}
        
        # Grant permissions to all files in directory
        - name: Grant permissions to all files
          run: chmod -R 755 ./
        
        #- name: Copy files to swagger_src
        #  run: |
        #    sudo cp -f swagger.yaml /swagger_src/swagger.yaml
        
        - name: Move node modules directory
          run: cp -a ${{env.DEVOPS_STORE}}/swagger_modules/. .

        - name: Build swagger
          if: ${{inputs.build_project_type == 'swagger'}}
          run: |
            npm run build
        - name: Build nx Frontend
          if: ${{inputs.build_project_type == 'nx'}}
          run: |
            npm ci
            if [[ ${BRANCH_NAME} == 'main' ]]
            then
              npx nx build
            else
              npx nx run beeriot-web:build:staging
            fi
        - name: Build Storybok
          if: ${{inputs.build_project_type == 'storybook'}}
          run: |
            npm ci
            NODE_ENV=development npx nx build-storybook ui-components

        # Read commit message and determine if to skip cdk work NODE_ENV=development && npx nx build-storybook ui-components
        - name: Read if to skip cdk deployment based on commit message
          id: skip_cdk
          if: "contains(github.event.head_commit.message, '+cdk-skip')"
          run: |
            echo "We will skip cdk execution"
            echo "::set-output name=bypass_cdk::true"
        
        # Read of project files and set to variables
        - name: Get project constants from project.properties repo - Branch name, deployment role, skip cdk, destroy stack
          id: project_constants
          run: |
            account_id="`grep aws_${BRANCH_NAME}_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=env_id::${account_id}"
            
            oidc_role_name="`grep aws_${BRANCH_NAME}_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=oidc_role::${oidc_role_name}"

            cdk_deploy_role_arn="`grep aws_${BRANCH_NAME}_cdk_deployment_role ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=cdk_deploy::${cdk_deploy_role_arn}"
            
            aws_bucket="`grep aws_frontend_bucket ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=aws_bucket_name::${aws_bucket}"
            echo $aws_bucket

          working-directory: ${{env.PROJECT_FILES_DIRECTORY}}
        
        - name: Copy cdk config files
          run: |
            rm -r ${{env.CDK_MODULE}}/config_files/*
            cp -a ${{inputs.config_files_directory}}/. ${{env.CDK_MODULE}}/config_files/
            cp -a ${{env.PROJECT_FILES_DIRECTORY}}/. ${{env.CDK_MODULE}}/
        
        
        # Role that will be used for OIDC. This is the role this session will assume when connecting to AWS         
        - name: Arn to use
          id: aws_assume_role
          run: |
            echo "::set-output name=role_arn1::arn:aws:iam::${{ steps.project_constants.outputs.env_id }}:role/${{ steps.project_constants.outputs.oidc_role}}"
      
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{steps.aws_assume_role.outputs.role_arn1}}
            role-session-name: ${{ github.event.repository.name }}-${{ steps.date.outputs.date }}
            aws-region: ${{ env.AWS_REGION }}
        
        - name: Install yaml
          run: |
            pip install pyyaml
            sudo npm install -g aws-cdk
        
        - name: AWS function environment suffix
          id: get_aws_branch_name
          run: |
            if [[ ${{inputs.branch_name}} == 'main' ]]
            then
              echo "AWS_ENV_NAME=production" >> $GITHUB_ENV
            elif [[ ${{inputs.branch_name}} == 'integration' ]]
            then
              echo "AWS_ENV_NAME=int" >> $GITHUB_ENV
            elif [[ ${{inputs.branch_name}} == 'dev' ]]
            then
              echo "AWS_ENV_NAME=dev" >> $GITHUB_ENV
            elif [[ ${{inputs.branch_name}} == 'beta' ]]
            then
              echo "AWS_ENV_NAME=beta" >> $GITHUB_ENV
            else
              echo "AWS_ENV_NAME=dev" >> $GITHUB_ENV
            fi

        - name: Stack id to query
          run: |
            echo "IN_STACK_ID=${{inputs.in_stack_id}}" >> $GITHUB_ENV

        - name: Stack id to query if users
          if: contains( github.ref, 'users' )
          run: |
            echo "IN_STACK_ID=${{inputs.in_stack_id}}-${{github.actor}}" >> $GITHUB_ENV
            

        - name: Hosting bucket
          run: |
            echo "HOSTING_BUCKET=${{inputs.hosting_bucket}}-${{env.AWS_ENV_NAME}}" >> $GITHUB_ENV
        
        - name: Hosting bucket if users
          if: contains( github.ref, 'users' )
          run: |
            echo "HOSTING_BUCKET=${{inputs.hosting_bucket}}-${{github.actor}}-${{env.AWS_ENV_NAME}}" >> $GITHUB_ENV
        

        - name: Cloudfront id output
          run: |
            echo "CF_ID_OUTPUT=${{inputs.in_cloudfront_output}}cfoutput" >> $GITHUB_ENV
        
        - name: Cloudfront URL output
          run: |
            echo "CF_URL_OUTPUT=${{inputs.in_cloudfront_url_output_to_query}}cfurloutput" >> $GITHUB_ENV
            
        
        - name: Cloudfront id output if users
          if: contains( github.ref, 'users' )
          run: |
            echo "CF_ID_OUTPUT=${{inputs.in_cloudfront_output}}${GITHUB_USER}cfoutput" >> $GITHUB_ENV
            
        
        - name: Cloudfront URL output if users
          if: contains( github.ref, 'users' )
          run: |
            echo "CF_URL_OUTPUT=${{inputs.in_cloudfront_url_output_to_query}}${GITHUB_USER}cfurloutput" >> $GITHUB_ENV

        # Upload a file to AWS s3
        - name:  Deploy to S3 - Copy Build folder to s3
          run: |
            aws s3 sync ./$BUILD_DIRECTORY s3://${HOSTING_BUCKET}
        #    aws cloudfront create-invalidation --distribution-id E11LJKZLIMW93N --paths '/*'
        # Build & deploy docker image
        - name: Invalidate cloudfront cache
        #  if: ${{ steps.skip_everything.outputs.skip_everything1 != 'true' && steps.get_deployment_type.outputs.deployment_type == 'web' && steps.get_cdk_destroy_stack.outputs.cdk_destroy_stack != 'true' }}
          run: |
            echo ${CF_ID_OUTPUT} is the output id
            CLOUDFRONT_ID=$(aws cloudformation --region ${{ env.AWS_REGION }} describe-stacks --stack-name ${IN_STACK_ID} --query "Stacks[0].Outputs[?OutputKey=='${CF_ID_OUTPUT}'].OutputValue" --output text)
            aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths '/*'
        
        - name: Domain url
          id: domain_url
        #  if: ${{ steps.skip_everything.outputs.skip_everything1 != 'true' && steps.get_deployment_type.outputs.deployment_type == 'web' && steps.get_cdk_destroy_stack.outputs.cdk_destroy_stack != 'true' }}
          run: |
            DOMAIN_URL=$(aws cloudformation --region ${{ env.AWS_REGION }} describe-stacks --stack-name ${IN_STACK_ID} --query "Stacks[0].Outputs[?OutputKey=='${CF_URL_OUTPUT}'].OutputValue" --output text)
            echo "::set-output name=DOMAIN_URL_OUTPUT::$DOMAIN_URL" 
            
        - name: Echo Domain URL
          run: |
            echo "::warning::https://${{ steps.domain_url.outputs.DOMAIN_URL_OUTPUT}} is the cloudfront url"

    outputs:
      domain_url: ${{ steps.domain_url.outputs.DOMAIN_URL_OUTPUT}}
  
  Application-Deployment:
    if: (github.repository != 'pallcorporation/digital-iot-devops-store' && github.repository == 'pallcorporation/beer-application-deployment')
    runs-on: ubuntu-latest
      
    steps:
        # Get current time stamp to use as reference elsewhere
        - name: Get current date
          id: date
          run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"

        # Get branch name to use for look up
        
        - name: Branch if Prod
          if: contains( github.ref, 'prod' )
          run: |
            echo "BRANCH_NAME=production" >> $GITHUB_ENV
        
        - name: Branch if BETA
          if: contains( github.ref, 'beta' )
          run: |
            echo "BRANCH_NAME=beta" >> $GITHUB_ENV
            
        
        - name: Echo branch
          run: echo "${BRANCH_NAME} is the branch name to use in lookup"

        - name: Make project files directory
          run: mkdir ${{env.PROJECT_FILES_DIRECTORY}}
        
        - name: Project files clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/beer-project-properties
            ref: main
            path: ${{env.PROJECT_FILES_DIRECTORY}}
        
        # Read of project files and set to variables
        - name: Get project constants - tools
          id: project_constants_tools
          run: |
            account_id="`grep aws_tools_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=env_id::${account_id}"
            
            oidc_role_name="`grep aws_tools_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=oidc_role::${oidc_role_name}"

            cdk_deploy_role_arn="`grep aws_tools_cdk_deployment_role ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=cdk_deploy::${cdk_deploy_role_arn}"

          working-directory: ${{env.PROJECT_FILES_DIRECTORY}}
        
        - name: Get project constants - tools
          id: project_constants_target
          run: |
            account_id="`grep aws_${{env.BRANCH_NAME}}_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=env_id::${account_id}"
            
            oidc_role_name="`grep aws_${{env.BRANCH_NAME}}_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=oidc_role::${oidc_role_name}"

            cdk_deploy_role_arn="`grep aws_${{env.BRANCH_NAME}}_cdk_deployment_role ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=cdk_deploy::${cdk_deploy_role_arn}"

          working-directory: ${{env.PROJECT_FILES_DIRECTORY}}
        
        # Role that will be used for OIDC. This is the role this session will assume when connecting to AWS         
        - name: Arn to use
          id: aws_assume_role_tools
          run: |
            echo "::set-output name=role_arn1::arn:aws:iam::${{ steps.project_constants_tools.outputs.env_id }}:role/${{ steps.project_constants_tools.outputs.oidc_role}}"
        - name: Arn to use
          id: aws_assume_role_target
          run: |
            echo "::set-output name=role_arn1::arn:aws:iam::${{ steps.project_constants_target.outputs.env_id }}:role/${{ steps.project_constants_target.outputs.oidc_role}}"
      
        - name: Configure AWS credentials Tools
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{steps.aws_assume_role_tools.outputs.role_arn1}}
            role-session-name: ${{ github.event.repository.name }}-${{ steps.date.outputs.date }}
            aws-region: ${{ env.AWS_REGION }}

        - name: Download from s3
          run: |
            mkdir deployment_stage
            aws s3 cp s3://beer-ul-nx-workspace-beta/${{inputs.repo_version}}.zip ./
        
        - name: 'Unzip project'
          uses: montudor/action-zip@v1.0.0
          with:
            args: unzip -qq ${{inputs.repo_version}}.zip -d deployment_stage
        
        - name: Configure AWS credentials ${{env.BRANCH_NAME}}
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{steps.aws_assume_role_target.outputs.role_arn1}}
            role-session-name: ${{ github.event.repository.name }}-${{ steps.date.outputs.date }}
            aws-region: ${{ env.AWS_REGION }}

        - name: AWS function environment suffix
          id: get_aws_branch_name
          run: |
            if [[ ${{inputs.branch_name}} == 'prod' ]]
            then
              echo "AWS_ENV_NAME=production" >> $GITHUB_ENV
            elif [[ ${{inputs.branch_name}} == 'beta' ]]
            then
              echo "AWS_ENV_NAME=beta" >> $GITHUB_ENV
            fi
        
        - name: Hosting bucket
          run: |
            echo "HOSTING_BUCKET=${{inputs.hosting_bucket}}-${{env.AWS_ENV_NAME}}" >> $GITHUB_ENV
        
        - name: Copy to ${{env.BRANCH_NAME}} s3
          run: |
            aws s3 sync ./deployment_stage/dist/apps/beeriot-web s3://${{env.HOSTING_BUCKET}}
