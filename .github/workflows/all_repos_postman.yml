name: Beer microservice API automated tests
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  #push:
  #  branches:
  #    - dev
  #    - integration
  workflow_call:
    inputs:
      branch_name:
        required: true
        type: string

    secrets:
      envPAT:
        required: true
      teams_uri:
        required: false
      postman_username:
        required: true
      postman_password:
        required: true
      api_gateway_url_dev:
        required: true
      api_gateway_url_integration:
        required: true
      cognito_dev_user_pool_secret:
        required: true
      cognito_integration_user_pool_secret:
        required: true
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_REGION : "us-east-1"
  PROJECT_FILES_GIT : "beer-project-properties.git"
  ORGANIZATION: "pallcorporation"
  PROJECT_FILES_NAME: "project.properties"
  PROJECT_FILES_DIRECTORY: "project_file"
  IMAGE_REGISTRY: "ghcr.io"
  IMAGE_REGISTRY_USERNAME: ${{github.actor}}
  IMAGE_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CDK_MODULE: cdk
  POSTMAN_COLLECTION_DIRECTORY: "newman_collection"
  REPO_NAME: ${{ github.event.repository.name }}
  ADMIN_USERS_POLICY_SEED: beer-ul-admin-users
  IAM_SERVICE_REPOSITORY: beer-be-iam-service
  COGNITO_USER_POOL_STACK_ID: beer-cognito-0-user-pool
  COGNITO_USER_POOL_ID_OUTPUT: beercognito0userpoolidoutput
  API_GATEWAY_STACKID_OUT: beer-apigateway-0-iot-apigw
  API_GATEWAY_URL_OUT: beerapigateway0iotapigwurloutput

permissions:
      id-token: write
      contents: read    # This is required for actions/checkout@v1 !
      packages: write


jobs:
  Project-Admins:
    runs-on: ubuntu-latest
    outputs:
      cognito_secret1: ${{ steps.cognito_secret.outputs.cognito_secret }}
      postman_username: ${{ env.POSTMAN_USERNAME }}
      postman_password: ${{ env.POSTMAN_PASSWORD }}
      branch_name: ${{env.BRANCH_NAME}}
    steps:
      # Get current time stamp to use as reference elsewhere
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"

      - name: Branch name
        id: get_branch_name
        run: |
          echo "BRANCH_NAME=${{inputs.branch_name}}" >> $GITHUB_ENV

    #  - name: Branch name
    #    id: get_branch_name
    #    run: |
    #      if [[ ${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}} == 'main' ]]
    #      then
    #        echo "BRANCH_NAME=dev" >> $GITHUB_ENV
    #        
    #      elif [ ${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}} == '' ]
    #      then 
    #        echo "BRANCH_NAME=dev" >> $GITHUB_ENV
    #      else
    #        echo "BRANCH_NAME=$(echo ${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}})" >> $GITHUB_ENV
    #      fi

      # Clone repositories prior to work
      - name: Git clone the repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.envPAT }}
          repository: pallcorporation/beer-ul-postman-env
          ref: main
          path: ${{env.ADMIN_USERS_POLICY_SEED}}
      
      - name: Admin users repo clone
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.envPAT }}
          repository: pallcorporation/beer-ul-admin-users
          ref: main
          path: ${{env.ADMIN_USERS_POLICY_SEED}}
      
      - name: Make ${{env.IAM_SERVICE_REPOSITORY}}
        run: |
          mkdir ${{env.IAM_SERVICE_REPOSITORY}}
      - name: beer-be-iam-service repo clone
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.envPAT }}
          repository: pallcorporation/beer-be-iam-service
          ref: main
          path: ${{env.IAM_SERVICE_REPOSITORY}}
      
      - name: Project files clone
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.envPAT }}
          repository: pallcorporation/beer-project-properties
          ref: main
          path: ${{env.PROJECT_FILES_DIRECTORY}}
      
      - name: Get project constants from project.properties repo - Branch name, deployment role, skip cdk, destroy stack
        id: project_constants
        run: |
          account_id="`grep aws_${BRANCH_NAME}_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=env_id::${account_id}"
          echo $account_id is the account id
          echo "AWS_ACCOUNT=${account_id}" >> $GITHUB_ENV
          

          oidc_role_name="`grep aws_${BRANCH_NAME}_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=oidc_role::${oidc_role_name}"

          cdk_deploy_role_arn="`grep aws_${BRANCH_NAME}_cdk_deployment_role ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=cdk_deploy::${cdk_deploy_role_arn}"
          
          aws_bucket="`grep aws_frontend_bucket ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=aws_bucket_name::${aws_bucket}"
          echo $aws_bucket

          cloud_front_id="`grep aws_${BRANCH_NAME}_cloudfront_id ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=aws_cloud_front_id::${cloud_front_id}"
        working-directory: ${{env.PROJECT_FILES_DIRECTORY}}
      
      # Role that will be used for OIDC. This is the role this session will assume when connecting to AWS         
      - name: Arn to use
        id: aws_assume_role
        run: |
          echo "::set-output name=role_arn1::arn:aws:iam::${{ steps.project_constants.outputs.env_id }}:role/${{ steps.project_constants.outputs.oidc_role}}"
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{steps.aws_assume_role.outputs.role_arn1}}
          role-session-name: ${{ github.event.repository.name }}-${{ steps.date.outputs.date }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Set environment Cognito secret variables for python
        id: cognito_secret
        run: |
          if [[ ${BRANCH_NAME} == 'dev' ]]
          then
            echo "COGNITO_USERPOOL_SECRET=${{secrets.cognito_dev_user_pool_secret}}" >> $GITHUB_ENV
            echo "::set-output name=cognito_secret::${{secrets.cognito_dev_user_pool_secret}}"

          elif [[ ${BRANCH_NAME} == 'integration' ]]
          then
            echo "COGNITO_USERPOOL_SECRET=${{secrets.cognito_integration_user_pool_secret}}" >> $GITHUB_ENV
            echo "::set-output name=cognito_secret::${{secrets.cognito_integration_user_pool_secret}}"
          
          fi
      
      - name: Postman required variables
        run: |
          echo "CREATE_POSTMAN_USER=True" >> $GITHUB_ENV


      - name: Cognito User Pool query
        id: get_user_pool_id
        run: |
          echo "COGNITO_USERPOOL_ID=$(aws cloudformation --region ${{ env.AWS_REGION }} describe-stacks --stack-name ${{env.COGNITO_USER_POOL_STACK_ID}} --query 'Stacks[0].Outputs[?OutputKey==`${{env.COGNITO_USER_POOL_ID_OUTPUT}}`].OutputValue' --output text)" >> $GITHUB_ENV      

      - name: Run python script to seed policy to admins
        run: |
          ls
          rm -rf ${{env.ADMIN_USERS_POLICY_SEED}}/super-user-policy.json
          cp ${{env.IAM_SERVICE_REPOSITORY}}/seeding-data/super-user-policy.jsonc ${{env.ADMIN_USERS_POLICY_SEED}}/super-user-policy.json
          pip3 install boto3
          pip3 install pytz
          python3 ${{env.ADMIN_USERS_POLICY_SEED}}/admins.py
      
      - name: Run python script to Confirm or create envrionment admin user
        run: |
          python3 ${{env.ADMIN_USERS_POLICY_SEED}}/create_environment_user.py
      
      - name: Read output file from seed
        run: |
          cat deploy_data.properties

          COGNITO_USERNAME="`grep COGNITO_USERNAME deploy_data.properties|cut -d'=' -f2`"
          echo "POSTMAN_USERNAME=${COGNITO_USERNAME}" >> $GITHUB_ENV

          COGNITO_PASSWORD="`grep COGNITO_PASSWORD deploy_data.properties|cut -d'=' -f2`"
          echo "POSTMAN_PASSWORD=${COGNITO_PASSWORD}" >> $GITHUB_ENV

  AT:
    needs: Project-Admins
    runs-on: ubuntu-latest
    outputs:
      postman_username: ${{ env.POSTMAN_USERNAME }}
    strategy:
      matrix:
        microservice-repos:
          - beer-be-area-service
          - beer-be-block-service
          - beer-be-cluster-service
          - beer-be-company-service
          - beer-be-companysite-service
          - beer-be-consumable-service
          - beer-be-iam-service
          - beer-be-permission-service
          - beer-be-group-service
          - beer-be-settings-service
          - beer-be-system-service
          
      fail-fast: false
    steps:
      # Get current time stamp to use as reference elsewhere
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"
      
      - name: Postman variables
        run: |
          echo "POSTMAN_USERNAME=${{ needs.Project-Admins.outputs.postman_username }}" >> $GITHUB_ENV
          echo "POSTMAN_PASSWORD=${{ needs.Project-Admins.outputs.postman_password }}" >> $GITHUB_ENV
      
      # Clone repositories prior to work
      - name: Git clone the repository
        uses: actions/checkout@v2

      - name: Branch name
        id: get_branch_name
        run: |
          echo "BRANCH_NAME=${{inputs.branch_name}}" >> $GITHUB_ENV
        
      - name: Make ${{ matrix.microservice-repos }} directories
        id: make_directories
        run: |
          mkdir ${{ matrix.microservice-repos }}
          mkdir ${{matrix.microservice-repos}}/${{env.PROJECT_FILES_DIRECTORY}}
      
      - name: Check out Repos
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.envPAT }}
          repository: pallcorporation/${{ matrix.microservice-repos }}
          ref: ${{inputs.branch_name}}
          path: ${{ matrix.microservice-repos }}
      
      - name: Project files clone
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.envPAT }}
          repository: pallcorporation/beer-project-properties
          ref: main
          path: ${{env.PROJECT_FILES_DIRECTORY}}

      - name: Copy Project files
        run: cp -a ${{env.PROJECT_FILES_DIRECTORY}}/* /${{ matrix.microservice-repos }}/${{env.PROJECT_FILES_DIRECTORY}}
      
      - name: Get project constants from project.properties repo - Branch name, deployment role, skip cdk, destroy stack
        id: project_constants
        run: |
          account_id="`grep aws_${BRANCH_NAME}_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=env_id::${account_id}"
          echo $account_id is the account id
          echo "AWS_ACCOUNT=${account_id}" >> $GITHUB_ENV
          

          oidc_role_name="`grep aws_${BRANCH_NAME}_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=oidc_role::${oidc_role_name}"

          cdk_deploy_role_arn="`grep aws_${BRANCH_NAME}_cdk_deployment_role ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=cdk_deploy::${cdk_deploy_role_arn}"
          
          aws_bucket="`grep aws_frontend_bucket ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=aws_bucket_name::${aws_bucket}"
          echo $aws_bucket

          cloud_front_id="`grep aws_${BRANCH_NAME}_cloudfront_id ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=aws_cloud_front_id::${cloud_front_id}"
        working-directory: ${{env.PROJECT_FILES_DIRECTORY}}
      
      # Role that will be used for OIDC. This is the role this session will assume when connecting to AWS         
      - name: Arn to use
        id: aws_assume_role
        run: |
          echo "::set-output name=role_arn1::arn:aws:iam::${{ steps.project_constants.outputs.env_id }}:role/${{ steps.project_constants.outputs.oidc_role}}"
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{steps.aws_assume_role.outputs.role_arn1}}
          role-session-name: ${{ github.event.repository.name }}-${{ steps.date.outputs.date }}
          aws-region: ${{ env.AWS_REGION }}

      # Grant permissions to all files in directory
      - name: Grant permissions to all files
        run: chmod -R 755 ./

      - name: Check if postman collections exists
        id: postman_collections
        run: |
          DIR="${{ matrix.microservice-repos }}/postman/"
          ls
          if [ -d "$DIR" ]; then
            # Take action if $DIR exists. #
            echo "Installing config files in ${DIR}..."
            echo "::set-output name=postman_collections_found::true"
          fi

      # Node installation (if required)
      - name: Setup node.js environment
        uses: actions/setup-node@v2.1.2
      
      - name: Install newman
        run: |
          npm install -g newman
          
      - name: Copy file to use
        if: ${{steps.postman_collections.outputs.postman_collections_found == 'true'}}
        run: |
          cp ${BRANCH_NAME}_env_var.json env_var.json

      - name: Set environment variables for cognito secret
        id: cognito_secret
        run: |
          if [[ ${BRANCH_NAME} == 'dev' ]]
          then
            echo "COGNITO_USERPOOL_SECRET=${{secrets.cognito_dev_user_pool_secret}}" >> $GITHUB_ENV
            echo "::set-output name=cognito_secret::${{secrets.cognito_dev_user_pool_secret}}"
          elif [[ ${BRANCH_NAME} == 'integration' ]]
          then
            echo "COGNITO_USERPOOL_SECRET=${{secrets.cognito_integration_user_pool_secret}}" >> $GITHUB_ENV
            echo "::set-output name=cognito_secret::${{secrets.cognito_integration_user_pool_secret}}"
          fi
      
      - name: API Gateway output
        run: |
          echo "API_GATEWAY_STACKID_OUT=beerapigateway0iotapigwurloutput" >> $GITHUB_ENV
          echo "API_GATEWAY_URL=$(aws cloudformation --region ${{ env.AWS_REGION }} describe-stacks --stack-name ${{env.API_GATEWAY_STACKID_OUT}} --query 'Stacks[0].Outputs[?OutputKey==`${{env.API_GATEWAY_URL_OUT}}`].OutputValue' --output text)" >> $GITHUB_ENV
      
      - name: Run python script to replace secrets
        run: |
          ls
          pip3 install pytz
          pip3 install boto3
          python3 replace_secrets.py
          echo "after"
          ls
          cat final_env_var.json
        
      - name: Collections found
        run: |
          echo ${{steps.postman_collections.outputs.postman_collections_found}}

      - name: run newman
        if: ${{steps.postman_collections.outputs.postman_collections_found == 'true'}}
        run: |
          newman run ./${{ matrix.microservice-repos }}/postman/collection.json -e ./final_env_var.json
      
      - name: Microsoft Teams Notification
        if: failure()
        uses: jdcargile/ms-teams-notification@v1.3
        with:
          github-token: ${{ secrets.envPAT }} # this will use the runner's token.
          ms-teams-webhook-uri: ${{ secrets.teams_uri }}
          notification-summary: "${{ matrix.microservice-repos }} test error on ${{env.BRANCH_NAME}} branch &#x274C; : Please test results."
          notification-color: FF0000
          timezone: America/New_York

  postman-disable-user:
    runs-on: ubuntu-latest
    needs: [AT] #,stage-4-UI-hosting]
    if: always()
    steps:
      # Get current time stamp to use as reference elsewhere
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"
      - name: Branch name
        id: get_branch_name
        run: |
          echo "BRANCH_NAME=${{inputs.branch_name}}" >> $GITHUB_ENV
      
      - name: Set ENV Variables
        run: |
          echo "CDK_MODULE=cdk_checkedout" >> $GITHUB_ENV
          echo "PROJECT_FILES_DIRECTORY=project_file" >> $GITHUB_ENV
          echo "PROJECT_FILES_NAME=project.properties" >> $GITHUB_ENV
          echo "POSTMAN_COLLECTION_DIRECTORY=newman_collection" >> $GITHUB_ENV
          echo "ADMIN_USERS_POLICY_SEED=beer-ul-admin-users" >> $GITHUB_ENV
          echo "IAM_SERVICE_REPOSITORY=beer-be-iam-service" >> $GITHUB_ENV
          echo "COGNITO_USER_POOL_ID_OUTPUT=beercognito0userpoolidoutput" >> $GITHUB_ENV
          echo "COGNITO_USER_POOL_STACK_ID=beer-cognito-0-user-pool" >> $GITHUB_ENV
          echo "COGNITO_CLIENT_ID_OUTPUT=beercognito0userpoolclientidoutput" >> $GITHUB_ENV
          echo "API_GATEWAY_STACKID_OUT=beer-apigateway-0-iot-apigw" >> $GITHUB_ENV
          echo "API_GATEWAY_URL_OUT=beerapigateway0iotapigwurloutput" >> $GITHUB_ENV
      
      - name: Run python script to replace secrets
        run: |
          pip3 install boto3
          pip3 install pytz

      - name: Admin users repo clone
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.envPAT }}
          repository: pallcorporation/beer-ul-admin-users
          ref: main
          path: ${{env.ADMIN_USERS_POLICY_SEED}}
      
      - name: Postman variables
        run: |
          echo "POSTMAN_USERNAME=${{ needs.at.outputs.postman_username }}" >> $GITHUB_ENV

      - name: Project files clone
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.envPAT }}
          repository: pallcorporation/beer-project-properties
          ref: main
          path: ${{env.PROJECT_FILES_DIRECTORY}}

      # Read of project files and set to variables
      - name: Get project constants from project.properties repo - Branch name, deployment role, skip cdk, destroy stack
        id: project_constants
        run: |
          account_id="`grep aws_${BRANCH_NAME}_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=env_id::${account_id}"
          echo $account_id is the account id
          echo "AWS_ACCOUNT=${account_id}" >> $GITHUB_ENV
          

          oidc_role_name="`grep aws_${BRANCH_NAME}_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=oidc_role::${oidc_role_name}"

          cdk_deploy_role_arn="`grep aws_${BRANCH_NAME}_cdk_deployment_role ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
          echo "::set-output name=cdk_deploy::${cdk_deploy_role_arn}"

        working-directory: ${{env.PROJECT_FILES_DIRECTORY}}
      
      # Role that will be used for OIDC. This is the role this session will assume when connecting to AWS         
      - name: Arn to use
        id: aws_assume_role
        run: |
          echo "::set-output name=role_arn1::arn:aws:iam::${{ steps.project_constants.outputs.env_id }}:role/${{ steps.project_constants.outputs.oidc_role}}"
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{steps.aws_assume_role.outputs.role_arn1}}
          role-session-name: ${{ github.event.repository.name }}-${{ steps.date.outputs.date }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Cognito User Pool query
        id: get_user_pool_id
        run: |
          echo "COGNITO_USERPOOL_ID=$(aws cloudformation --region ${{ env.AWS_REGION }} describe-stacks --stack-name ${{env.COGNITO_USER_POOL_STACK_ID}} --query 'Stacks[0].Outputs[?OutputKey==`${{env.COGNITO_USER_POOL_ID_OUTPUT}}`].OutputValue' --output text)" >> $GITHUB_ENV
          
      - name: Cognito User Pool query
        id: get_user_pool_client_id
        run: |
          echo "COGNITO_CLIENT_ID=$(aws cloudformation --region ${{ env.AWS_REGION }} describe-stacks --stack-name ${{env.COGNITO_USER_POOL_STACK_ID}} --query 'Stacks[0].Outputs[?OutputKey==`${{env.COGNITO_CLIENT_ID_OUTPUT}}`].OutputValue' --output text)" >> $GITHUB_ENV
        
      - name: Python script to disable & delete created postman user
        run: |
          echo "DELETE_POSTMAN_USER=True"
          python3 ${{env.ADMIN_USERS_POLICY_SEED}}/delete_user.py