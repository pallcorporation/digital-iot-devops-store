name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  #push:
  #  branches:
  #    - dev
  #    - integration
  workflow_call:
    inputs:
      branch_name:
        required: true
        type: string
      
      destroy_stack:
        type: boolean
        default: false

      deployment_type:
        type: string
      config_files_directory:
        required: true
        type: string
    secrets:
      envPAT:
        required: true
      POSTMAN_USERNAME_SECRET:
        required: true
      POSTMAN_PASSWORD_SECRET:
        required: true
      COGNITO_USERPOOL_SECRET_PHRASE:
        required: true
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  #BUCKET_NAME : "github-oidc-test-mitch"
  AWS_REGION : "us-east-1"
  PROJECT_FILES_GIT : "beer-project-properties.git"
  ORGANIZATION: "pallcorporation"
  PROJECT_FILES_NAME: "project.properties"
  PROJECT_FILES_DIRECTORY: "project_file"
  IMAGE_REGISTRY: "ghcr.io"
  IMAGE_REGISTRY_USERNAME: ${{github.actor}}
  IMAGE_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CDK_MODULE: "cdk_checkedout"
  API_GATEWAY_STACK_ID: beer-apigateway-0-iot-apigw
  API_GATEWAY_OUPUT_LOOKUP: beerapigateway0iotapigwurloutput
  POSTMAN_COLLECTION_DIRECTORY: "newman_collection"
  REPO_NAME: ${{ github.event.repository.name }}
  ADMIN_USERS_POLICY_SEED: beer-ul-admin-users
  

permissions:
      id-token: write
      contents: read    # This is required for actions/checkout@v1
      packages: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:  
  AWS-CDK-Deployment:
    if: github.repository != 'pallcorporation/digital-iot-devops-store'
    runs-on: ubuntu-latest
      
    steps:
        # Get current time stamp to use as reference elsewhere
        - name: Get current date
          id: date
          run: echo "::set-output name=date::$(date +'%Y%m%dT%H%M%S')"
        
        # Get branch name to use for look up
        - name: Branch name
          id: get_branch_name
          run: |
            if [[ ${{inputs.branch_name}} == 'main' ]]
            then
              echo "BRANCH_NAME=production" >> $GITHUB_ENV
            else
              echo "BRANCH_NAME=$(echo ${{inputs.branch_name}})" >> $GITHUB_ENV
            fi
        
        # Clone repositories prior to work
        - name: Git clone the repository
          uses: actions/checkout@v1
        
        - name: Make Newman directory
          run: mkdir ${{env.POSTMAN_COLLECTION_DIRECTORY}}

        - name: Make postman directory (authorizer test)
          if: ${{ github.event.repository.name }} == "beer-be-api-authorizer"
          run: |
            DIR="postman/"
            if [ -d "$DIR" ]; then
              # Take action if $DIR exists. #
              echo "Installing config files in ${DIR}..."
              echo "::set-output name=postman_collections_found::true"
            else
              mkdir postman
            fi
            
        
        - name: Postman repo clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/beer-ul-postman-env
            ref: main
            path: ${{env.POSTMAN_COLLECTION_DIRECTORY}}

        - name: Admin users repo clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/beer-ul-admin-users
            ref: main
            path: ${{env.ADMIN_USERS_POLICY_SEED}}
        
        - name: Clone default repository (authorizer test)
          if: ${{ github.event.repository.name }} == "beer-be-api-authorizer"
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/beer-be-company-service
            ref: ${{env.BRANCH_NAME}}
            path: beer-be-company-service
        
        - name: Project files clone
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.envPAT }}
            repository: pallcorporation/beer-project-properties
            ref: main
            path: ${{env.PROJECT_FILES_DIRECTORY}}
        # Read of project files and set to variables
        - name: Get project constants from project.properties repo - Branch name, deployment role, skip cdk, destroy stack
          id: project_constants
          run: |
            account_id="`grep aws_dev_account ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=env_id::${account_id}"
            echo $account_id is the account id
            echo "AWS_ACCOUNT=${account_id}" >> $GITHUB_ENV
            

            oidc_role_name="`grep aws_${BRANCH_NAME}_oidc_role_name ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=oidc_role::${oidc_role_name}"

            cdk_deploy_role_arn="`grep aws_${BRANCH_NAME}_cdk_deployment_role ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=cdk_deploy::${cdk_deploy_role_arn}"
            
            aws_bucket="`grep aws_frontend_bucket ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=aws_bucket_name::${aws_bucket}"
            echo $aws_bucket

            cloud_front_id="`grep aws_${BRANCH_NAME}_cloudfront_id ${{env.PROJECT_FILES_NAME}}|cut -d'=' -f2`"
            echo "::set-output name=aws_cloud_front_id::${cloud_front_id}"
          working-directory: ${{env.PROJECT_FILES_DIRECTORY}}
        
        # Role that will be used for OIDC. This is the role this session will assume when connecting to AWS         
        - name: Arn to use
          id: aws_assume_role
          run: |
            echo "::set-output name=role_arn1::arn:aws:iam::${{ steps.project_constants.outputs.env_id }}:role/${{ steps.project_constants.outputs.oidc_role}}"
      
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@master
          with:
            role-to-assume: ${{steps.aws_assume_role.outputs.role_arn1}}
            role-session-name: ${{ github.event.repository.name }}-${{ steps.date.outputs.date }}
            aws-region: ${{ env.AWS_REGION }}
        
        # Grant permissions to all files in directory
        - name: Grant permissions to all files
          run: chmod -R 755 ./

        - name: Copy file to use
          run: |
            cp ${{env.POSTMAN_COLLECTION_DIRECTORY}}/${{env.BRANCH_NAME}}_env_var.json env_var.json

        - name: Set environment variables for python
          run: |
            if [[ ${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}} == 'dev' ]]
            then
              echo "POSTMAN_USERNAME=${{secrets.BEER_POSTMAN_USERNAME}}" >> $GITHUB_ENV
              echo "POSTMAN_PASSWORD=${{secrets.BEER_POSTMAN_PASSWORD}}" >> $GITHUB_ENV
              echo "COGNITO_USERPOOL_SECRET=${{secrets.BEER_DEV_COGNITO_USERPOOL_SECRET}}" >> $GITHUB_ENV
            elif [[ ${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}} == 'integration' ]]
            then
              echo "POSTMAN_USERNAME=${{secrets.BEER_POSTMAN_USERNAME}}" >> $GITHUB_ENV
              echo "POSTMAN_PASSWORD=${{secrets.BEER_POSTMAN_PASSWORD}}" >> $GITHUB_ENV
              echo "COGNITO_USERPOOL_SECRET=${{secrets.BEER_INTEGRATION_COGNITO_USERPOOL_SECRET}}" >> $GITHUB_ENV
            else
              echo "POSTMAN_USERNAME=${{secrets.BEER_POSTMAN_USERNAME}}" >> $GITHUB_ENV
              echo "POSTMAN_PASSWORD=${{secrets.BEER_POSTMAN_PASSWORD}}" >> $GITHUB_ENV
              echo "COGNITO_USERPOOL_SECRET=${{secrets.BEER_DEV_COGNITO_USERPOOL_SECRET}}" >> $GITHUB_ENV
            fi
        - name: Run python script to seed policy to admins
          run: |
            pip3 install boto3
            python3 ${{env.ADMIN_USERS_POLICY_SEED}}/${{env.BRANCH_NAME}}_admins.py

        - name: Run python script to replace secrets
          run: |
            python3 ${{env.POSTMAN_COLLECTION_DIRECTORY}}/replace_secrets.py
            ls
            
        - name: Move postman files (authorizer test)
          if: ${{env.REPO_NAME == 'beer-be-api-authorizer' }}
          run: |
            mv beer-be-company-service/postman/* postman
        
        # Node installation (if required)
        - name: Setup node.js environment
          uses: actions/setup-node@v2.1.2
        
        - name: Install newman
          run: |
            npm install -g newman
        
        - name: Check if postman collections exists
          id: postman_collections
          run: |
            DIR="postman/"
            ls
            if [ -d "$DIR" ]; then
              # Take action if $DIR exists. #
              echo "Installing config files in ${DIR}..."
              echo "::set-output name=postman_collections_found::true"
            fi
        
        - name: Collections found
          run: |
            echo ${{steps.postman_collections.outputs.postman_collections_found}}

        - name: run newman
          if: ${{steps.postman_collections.outputs.postman_collections_found == 'true'}}
          run: |
            newman run ./postman/collection.json -e ./final_env_var.json